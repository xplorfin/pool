package pool

import (
	"crypto/tls"
	"crypto/x509"
	"github.com/lightningnetwork/lnd/cert"
	"github.com/lightningnetwork/lnd/lnrpc"
	"google.golang.org/grpc/credentials"
	"os"
	"time"
)

const (
	// DefaultTLSCertFilename is the default file name for the autogenerated
	// TLS certificate.
	DefaultTLSCertFilename = "tls.cert"

	// DefaultTLSKeyFilename is the default file name for the autogenerated
	// TLS key.
	DefaultTLSKeyFilename = "tls.key"

	defaultSelfSignedOrganization = "pool autogenerated cert"
)

// getTLSConfig generates a new self signed certificate or refreshes an existing
// one if necessary, then returns the full TLS configuration for initializing
// a secure server interface.
func getTLSConfig(cfg *Config) (*tls.Config, *credentials.TransportCredentials, error) {
	var (
		selfSignedCert       tls.Certificate
		parsedSelfSignedCert *x509.Certificate
		selfSignedCertErr    error
	)
	// Let's load our certificate first or create then load if it doesn't
	// yet exist.
	if !lnrpc.FileExists(cfg.TLSCertPath) && !lnrpc.FileExists(cfg.TLSKeyPath) {
		selfSignedCert, parsedSelfSignedCert, selfSignedCertErr = generateSelfSignedCert(cfg)
	} else {
		selfSignedCert, parsedSelfSignedCert, selfSignedCertErr = cert.LoadCert(cfg.TLSCertPath, cfg.TLSKeyPath)
	}

	if selfSignedCertErr != nil {
		return nil, nil, selfSignedCertErr
	}

	// If the certificate expired or it was outdated, delete it and the TLS
	// key and generate a new pair.
	if time.Now().After(parsedSelfSignedCert.NotAfter) {
		log.Info("TLS certificate is expired or outdated, " +
			"removing old file then generating a new one")

		err := os.Remove(cfg.TLSCertPath)
		if err != nil {
			return nil, nil, err
		}

		err = os.Remove(cfg.TLSKeyPath)
		if err != nil {
			return nil, nil, err
		}

		selfSignedCert, _, err = generateSelfSignedCert(cfg)
		if err != nil {
			return nil, nil, err
		}
	}

	tlsCfg := cert.TLSConfFromCert(selfSignedCert)
	restCreds, err := credentials.NewClientTLSFromFile(
		cfg.TLSCertPath, "",
	)
	if err != nil {
		return nil, nil, err
	}

	return tlsCfg, &restCreds, nil
}

func generateSelfSignedCert(cfg *Config) (tls.Certificate, *x509.Certificate, error) {
	log.Infof("Generating TLS certificates...")
	err := cert.GenCertPair(
		defaultSelfSignedOrganization, cfg.TLSCertPath,
		cfg.TLSKeyPath, cfg.TLSExtraIPs,
		cfg.TLSExtraDomains, cfg.TLSDisableAutofill,
		cert.DefaultAutogenValidity,
	)
	if err != nil {
		return tls.Certificate{}, nil, err
	}
	log.Infof("Done generating TLS certificates")

	return cert.LoadCert(cfg.TLSCertPath, cfg.TLSKeyPath)
}
