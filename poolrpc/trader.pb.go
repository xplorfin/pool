// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: trader.proto

package poolrpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AccountState int32

const (
	// The state of an account when it is pending its confirmation on-chain.
	AccountState_PENDING_OPEN AccountState = 0
	//
	//The state of an account when it has undergone an update on-chain either as
	//part of a matched order or a trader modification and it is pending its
	//confirmation on-chain.
	AccountState_PENDING_UPDATE AccountState = 1
	// The state of an account once it has confirmed on-chain.
	AccountState_OPEN AccountState = 2
	//
	//The state of an account once its expiration has been reached and its closing
	//transaction has confirmed.
	AccountState_EXPIRED AccountState = 3
	//
	//The state of an account when we're waiting for the closing transaction of
	//an account to confirm that required cooperation with the auctioneer.
	AccountState_PENDING_CLOSED AccountState = 4
	// The state of an account once its closing transaction has confirmed.
	AccountState_CLOSED AccountState = 5
	//
	//The state of an account that indicates that the account was attempted to be
	//recovered but failed because the opening transaction wasn't found by lnd.
	//This could be because it was never published or it never confirmed. Then the
	//funds are SAFU and the account can be considered to never have been opened
	//in the first place.
	AccountState_RECOVERY_FAILED AccountState = 6
	//
	//The account has recently participated in a batch and is not yet confirmed.
	AccountState_PENDING_BATCH AccountState = 7
)

// Enum value maps for AccountState.
var (
	AccountState_name = map[int32]string{
		0: "PENDING_OPEN",
		1: "PENDING_UPDATE",
		2: "OPEN",
		3: "EXPIRED",
		4: "PENDING_CLOSED",
		5: "CLOSED",
		6: "RECOVERY_FAILED",
		7: "PENDING_BATCH",
	}
	AccountState_value = map[string]int32{
		"PENDING_OPEN":    0,
		"PENDING_UPDATE":  1,
		"OPEN":            2,
		"EXPIRED":         3,
		"PENDING_CLOSED":  4,
		"CLOSED":          5,
		"RECOVERY_FAILED": 6,
		"PENDING_BATCH":   7,
	}
)

func (x AccountState) Enum() *AccountState {
	p := new(AccountState)
	*p = x
	return p
}

func (x AccountState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountState) Descriptor() protoreflect.EnumDescriptor {
	return file_trader_proto_enumTypes[0].Descriptor()
}

func (AccountState) Type() protoreflect.EnumType {
	return &file_trader_proto_enumTypes[0]
}

func (x AccountState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountState.Descriptor instead.
func (AccountState) EnumDescriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{0}
}

type MatchState int32

const (
	//
	//The OrderMatchPrepare message from the auctioneer was received initially.
	MatchState_PREPARE MatchState = 0
	//
	//The OrderMatchPrepare message from the auctioneer was processed successfully
	//and the batch was accepted.
	MatchState_ACCEPTED MatchState = 1
	//
	//The order was rejected by the trader daemon, either as an answer to a
	//OrderMatchSignBegin or OrderMatchFinalize message from the auctioneer.
	MatchState_REJECTED MatchState = 2
	//
	//The OrderMatchSignBegin message from the auctioneer was processed
	//successfully.
	MatchState_SIGNED MatchState = 3
	//
	//The OrderMatchFinalize message from the auctioneer was processed
	//successfully.
	MatchState_FINALIZED MatchState = 4
)

// Enum value maps for MatchState.
var (
	MatchState_name = map[int32]string{
		0: "PREPARE",
		1: "ACCEPTED",
		2: "REJECTED",
		3: "SIGNED",
		4: "FINALIZED",
	}
	MatchState_value = map[string]int32{
		"PREPARE":   0,
		"ACCEPTED":  1,
		"REJECTED":  2,
		"SIGNED":    3,
		"FINALIZED": 4,
	}
)

func (x MatchState) Enum() *MatchState {
	p := new(MatchState)
	*p = x
	return p
}

func (x MatchState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchState) Descriptor() protoreflect.EnumDescriptor {
	return file_trader_proto_enumTypes[1].Descriptor()
}

func (MatchState) Type() protoreflect.EnumType {
	return &file_trader_proto_enumTypes[1]
}

func (x MatchState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchState.Descriptor instead.
func (MatchState) EnumDescriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{1}
}

type MatchRejectReason int32

const (
	// No reject occurred, this is the default value.
	MatchRejectReason_NONE MatchRejectReason = 0
	//
	//The client didn't come up with the same result as the server and is
	//rejecting the batch because of that.
	MatchRejectReason_SERVER_MISBEHAVIOR MatchRejectReason = 1
	//
	//The client doesn't support the current batch verification version the
	//server is using.
	MatchRejectReason_BATCH_VERSION_MISMATCH MatchRejectReason = 2
	//
	//The client rejects some of the orders, not the full batch. This reason is
	//set on matches for orders that were in the same batch as partial reject ones
	//but were not themselves rejected.
	MatchRejectReason_PARTIAL_REJECT_COLLATERAL MatchRejectReason = 3
	//
	//The trader's client has a preference to only match orders with peers it
	//doesn't already have channels with. The order that is rejected with this
	//reason type comes from a peer that the trader already has channels with.
	MatchRejectReason_PARTIAL_REJECT_DUPLICATE_PEER MatchRejectReason = 4
	//
	//The trader's client couldn't connect to the remote node of the matched
	//order or the channel funding could not be initialized for another
	//reason. This could also be the rejecting node's fault if their
	//connection is not stable. Using this code can have a negative impact on
	//the reputation score of both nodes, depending on the number of errors
	//recorded.
	MatchRejectReason_PARTIAL_REJECT_CHANNEL_FUNDING_FAILED MatchRejectReason = 5
)

// Enum value maps for MatchRejectReason.
var (
	MatchRejectReason_name = map[int32]string{
		0: "NONE",
		1: "SERVER_MISBEHAVIOR",
		2: "BATCH_VERSION_MISMATCH",
		3: "PARTIAL_REJECT_COLLATERAL",
		4: "PARTIAL_REJECT_DUPLICATE_PEER",
		5: "PARTIAL_REJECT_CHANNEL_FUNDING_FAILED",
	}
	MatchRejectReason_value = map[string]int32{
		"NONE":                                  0,
		"SERVER_MISBEHAVIOR":                    1,
		"BATCH_VERSION_MISMATCH":                2,
		"PARTIAL_REJECT_COLLATERAL":             3,
		"PARTIAL_REJECT_DUPLICATE_PEER":         4,
		"PARTIAL_REJECT_CHANNEL_FUNDING_FAILED": 5,
	}
)

func (x MatchRejectReason) Enum() *MatchRejectReason {
	p := new(MatchRejectReason)
	*p = x
	return p
}

func (x MatchRejectReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchRejectReason) Descriptor() protoreflect.EnumDescriptor {
	return file_trader_proto_enumTypes[2].Descriptor()
}

func (MatchRejectReason) Type() protoreflect.EnumType {
	return &file_trader_proto_enumTypes[2]
}

func (x MatchRejectReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchRejectReason.Descriptor instead.
func (MatchRejectReason) EnumDescriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{2}
}

type InitAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountValue uint64 `protobuf:"varint,1,opt,name=account_value,json=accountValue,proto3" json:"account_value,omitempty"`
	// Types that are assignable to AccountExpiry:
	//	*InitAccountRequest_AbsoluteHeight
	//	*InitAccountRequest_RelativeHeight
	AccountExpiry isInitAccountRequest_AccountExpiry `protobuf_oneof:"account_expiry"`
	// Types that are assignable to Fees:
	//	*InitAccountRequest_ConfTarget
	Fees isInitAccountRequest_Fees `protobuf_oneof:"fees"`
}

func (x *InitAccountRequest) Reset() {
	*x = InitAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitAccountRequest) ProtoMessage() {}

func (x *InitAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitAccountRequest.ProtoReflect.Descriptor instead.
func (*InitAccountRequest) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{0}
}

func (x *InitAccountRequest) GetAccountValue() uint64 {
	if x != nil {
		return x.AccountValue
	}
	return 0
}

func (m *InitAccountRequest) GetAccountExpiry() isInitAccountRequest_AccountExpiry {
	if m != nil {
		return m.AccountExpiry
	}
	return nil
}

func (x *InitAccountRequest) GetAbsoluteHeight() uint32 {
	if x, ok := x.GetAccountExpiry().(*InitAccountRequest_AbsoluteHeight); ok {
		return x.AbsoluteHeight
	}
	return 0
}

func (x *InitAccountRequest) GetRelativeHeight() uint32 {
	if x, ok := x.GetAccountExpiry().(*InitAccountRequest_RelativeHeight); ok {
		return x.RelativeHeight
	}
	return 0
}

func (m *InitAccountRequest) GetFees() isInitAccountRequest_Fees {
	if m != nil {
		return m.Fees
	}
	return nil
}

func (x *InitAccountRequest) GetConfTarget() uint32 {
	if x, ok := x.GetFees().(*InitAccountRequest_ConfTarget); ok {
		return x.ConfTarget
	}
	return 0
}

type isInitAccountRequest_AccountExpiry interface {
	isInitAccountRequest_AccountExpiry()
}

type InitAccountRequest_AbsoluteHeight struct {
	AbsoluteHeight uint32 `protobuf:"varint,2,opt,name=absolute_height,json=absoluteHeight,proto3,oneof"`
}

type InitAccountRequest_RelativeHeight struct {
	RelativeHeight uint32 `protobuf:"varint,3,opt,name=relative_height,json=relativeHeight,proto3,oneof"`
}

func (*InitAccountRequest_AbsoluteHeight) isInitAccountRequest_AccountExpiry() {}

func (*InitAccountRequest_RelativeHeight) isInitAccountRequest_AccountExpiry() {}

type isInitAccountRequest_Fees interface {
	isInitAccountRequest_Fees()
}

type InitAccountRequest_ConfTarget struct {
	//
	//The target number of blocks that the transaction should be confirmed in.
	ConfTarget uint32 `protobuf:"varint,4,opt,name=conf_target,json=confTarget,proto3,oneof"`
}

func (*InitAccountRequest_ConfTarget) isInitAccountRequest_Fees() {}

type QuoteAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountValue uint64 `protobuf:"varint,1,opt,name=account_value,json=accountValue,proto3" json:"account_value,omitempty"`
	// Types that are assignable to Fees:
	//	*QuoteAccountRequest_ConfTarget
	Fees isQuoteAccountRequest_Fees `protobuf_oneof:"fees"`
}

func (x *QuoteAccountRequest) Reset() {
	*x = QuoteAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuoteAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuoteAccountRequest) ProtoMessage() {}

func (x *QuoteAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuoteAccountRequest.ProtoReflect.Descriptor instead.
func (*QuoteAccountRequest) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{1}
}

func (x *QuoteAccountRequest) GetAccountValue() uint64 {
	if x != nil {
		return x.AccountValue
	}
	return 0
}

func (m *QuoteAccountRequest) GetFees() isQuoteAccountRequest_Fees {
	if m != nil {
		return m.Fees
	}
	return nil
}

func (x *QuoteAccountRequest) GetConfTarget() uint32 {
	if x, ok := x.GetFees().(*QuoteAccountRequest_ConfTarget); ok {
		return x.ConfTarget
	}
	return 0
}

type isQuoteAccountRequest_Fees interface {
	isQuoteAccountRequest_Fees()
}

type QuoteAccountRequest_ConfTarget struct {
	//
	//The target number of blocks that the transaction should be confirmed in.
	ConfTarget uint32 `protobuf:"varint,2,opt,name=conf_target,json=confTarget,proto3,oneof"`
}

func (*QuoteAccountRequest_ConfTarget) isQuoteAccountRequest_Fees() {}

type QuoteAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinerFeeRateSatPerKw uint64 `protobuf:"varint,1,opt,name=miner_fee_rate_sat_per_kw,json=minerFeeRateSatPerKw,proto3" json:"miner_fee_rate_sat_per_kw,omitempty"`
	MinerFeeTotal        uint64 `protobuf:"varint,2,opt,name=miner_fee_total,json=minerFeeTotal,proto3" json:"miner_fee_total,omitempty"`
}

func (x *QuoteAccountResponse) Reset() {
	*x = QuoteAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuoteAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuoteAccountResponse) ProtoMessage() {}

func (x *QuoteAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuoteAccountResponse.ProtoReflect.Descriptor instead.
func (*QuoteAccountResponse) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{2}
}

func (x *QuoteAccountResponse) GetMinerFeeRateSatPerKw() uint64 {
	if x != nil {
		return x.MinerFeeRateSatPerKw
	}
	return 0
}

func (x *QuoteAccountResponse) GetMinerFeeTotal() uint64 {
	if x != nil {
		return x.MinerFeeTotal
	}
	return 0
}

type ListAccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//Only list accounts that are still active.
	ActiveOnly bool `protobuf:"varint,1,opt,name=active_only,json=activeOnly,proto3" json:"active_only,omitempty"`
}

func (x *ListAccountsRequest) Reset() {
	*x = ListAccountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccountsRequest) ProtoMessage() {}

func (x *ListAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccountsRequest.ProtoReflect.Descriptor instead.
func (*ListAccountsRequest) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{3}
}

func (x *ListAccountsRequest) GetActiveOnly() bool {
	if x != nil {
		return x.ActiveOnly
	}
	return false
}

type ListAccountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts []*Account `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *ListAccountsResponse) Reset() {
	*x = ListAccountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAccountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccountsResponse) ProtoMessage() {}

func (x *ListAccountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccountsResponse.ProtoReflect.Descriptor instead.
func (*ListAccountsResponse) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{4}
}

func (x *ListAccountsResponse) GetAccounts() []*Account {
	if x != nil {
		return x.Accounts
	}
	return nil
}

type Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The value, in satoshis, of the output.
	ValueSat uint64 `protobuf:"varint,1,opt,name=value_sat,json=valueSat,proto3" json:"value_sat,omitempty"`
	// The address corresponding to the output.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Output) Reset() {
	*x = Output{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Output) ProtoMessage() {}

func (x *Output) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Output.ProtoReflect.Descriptor instead.
func (*Output) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{5}
}

func (x *Output) GetValueSat() uint64 {
	if x != nil {
		return x.ValueSat
	}
	return 0
}

func (x *Output) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type OutputWithFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address corresponding to the output.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Types that are assignable to Fees:
	//	*OutputWithFee_ConfTarget
	//	*OutputWithFee_FeeRateSatPerKw
	Fees isOutputWithFee_Fees `protobuf_oneof:"fees"`
}

func (x *OutputWithFee) Reset() {
	*x = OutputWithFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputWithFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputWithFee) ProtoMessage() {}

func (x *OutputWithFee) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputWithFee.ProtoReflect.Descriptor instead.
func (*OutputWithFee) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{6}
}

func (x *OutputWithFee) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (m *OutputWithFee) GetFees() isOutputWithFee_Fees {
	if m != nil {
		return m.Fees
	}
	return nil
}

func (x *OutputWithFee) GetConfTarget() uint32 {
	if x, ok := x.GetFees().(*OutputWithFee_ConfTarget); ok {
		return x.ConfTarget
	}
	return 0
}

func (x *OutputWithFee) GetFeeRateSatPerKw() uint64 {
	if x, ok := x.GetFees().(*OutputWithFee_FeeRateSatPerKw); ok {
		return x.FeeRateSatPerKw
	}
	return 0
}

type isOutputWithFee_Fees interface {
	isOutputWithFee_Fees()
}

type OutputWithFee_ConfTarget struct {
	//
	//The target number of blocks that the transaction should be confirmed in.
	ConfTarget uint32 `protobuf:"varint,2,opt,name=conf_target,json=confTarget,proto3,oneof"`
}

type OutputWithFee_FeeRateSatPerKw struct {
	//
	//The fee rate, in satoshis per kw, to use for the withdrawal transaction.
	FeeRateSatPerKw uint64 `protobuf:"varint,3,opt,name=fee_rate_sat_per_kw,json=feeRateSatPerKw,proto3,oneof"`
}

func (*OutputWithFee_ConfTarget) isOutputWithFee_Fees() {}

func (*OutputWithFee_FeeRateSatPerKw) isOutputWithFee_Fees() {}

type OutputsWithImplicitFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outputs []*Output `protobuf:"bytes,1,rep,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *OutputsWithImplicitFee) Reset() {
	*x = OutputsWithImplicitFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputsWithImplicitFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputsWithImplicitFee) ProtoMessage() {}

func (x *OutputsWithImplicitFee) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputsWithImplicitFee.ProtoReflect.Descriptor instead.
func (*OutputsWithImplicitFee) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{7}
}

func (x *OutputsWithImplicitFee) GetOutputs() []*Output {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type CloseAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The trader key associated with the account that will be closed.
	TraderKey []byte `protobuf:"bytes,1,opt,name=trader_key,json=traderKey,proto3" json:"trader_key,omitempty"`
	// Types that are assignable to FundsDestination:
	//	*CloseAccountRequest_OutputWithFee
	//	*CloseAccountRequest_Outputs
	FundsDestination isCloseAccountRequest_FundsDestination `protobuf_oneof:"funds_destination"`
}

func (x *CloseAccountRequest) Reset() {
	*x = CloseAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseAccountRequest) ProtoMessage() {}

func (x *CloseAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseAccountRequest.ProtoReflect.Descriptor instead.
func (*CloseAccountRequest) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{8}
}

func (x *CloseAccountRequest) GetTraderKey() []byte {
	if x != nil {
		return x.TraderKey
	}
	return nil
}

func (m *CloseAccountRequest) GetFundsDestination() isCloseAccountRequest_FundsDestination {
	if m != nil {
		return m.FundsDestination
	}
	return nil
}

func (x *CloseAccountRequest) GetOutputWithFee() *OutputWithFee {
	if x, ok := x.GetFundsDestination().(*CloseAccountRequest_OutputWithFee); ok {
		return x.OutputWithFee
	}
	return nil
}

func (x *CloseAccountRequest) GetOutputs() *OutputsWithImplicitFee {
	if x, ok := x.GetFundsDestination().(*CloseAccountRequest_Outputs); ok {
		return x.Outputs
	}
	return nil
}

type isCloseAccountRequest_FundsDestination interface {
	isCloseAccountRequest_FundsDestination()
}

type CloseAccountRequest_OutputWithFee struct {
	//
	//A single output/address to which the remaining funds of the account will
	//be sent to at the specified fee. If an address is not specified, then
	//the funds are sent to an address the backing lnd node controls.
	OutputWithFee *OutputWithFee `protobuf:"bytes,2,opt,name=output_with_fee,json=outputWithFee,proto3,oneof"`
}

type CloseAccountRequest_Outputs struct {
	//
	//The outputs to which the remaining funds of the account will be sent to.
	//This should only be used when wanting to create two or more outputs,
	//otherwise OutputWithFee should be used instead. The fee of the account's
	//closing transaction is implicitly defined by the combined value of all
	//outputs.
	Outputs *OutputsWithImplicitFee `protobuf:"bytes,3,opt,name=outputs,proto3,oneof"`
}

func (*CloseAccountRequest_OutputWithFee) isCloseAccountRequest_FundsDestination() {}

func (*CloseAccountRequest_Outputs) isCloseAccountRequest_FundsDestination() {}

type CloseAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hash of the closing transaction.
	CloseTxid []byte `protobuf:"bytes,1,opt,name=close_txid,json=closeTxid,proto3" json:"close_txid,omitempty"`
}

func (x *CloseAccountResponse) Reset() {
	*x = CloseAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseAccountResponse) ProtoMessage() {}

func (x *CloseAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseAccountResponse.ProtoReflect.Descriptor instead.
func (*CloseAccountResponse) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{9}
}

func (x *CloseAccountResponse) GetCloseTxid() []byte {
	if x != nil {
		return x.CloseTxid
	}
	return nil
}

type WithdrawAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The trader key associated with the account that funds will be withdrawed
	//from.
	TraderKey []byte `protobuf:"bytes,1,opt,name=trader_key,json=traderKey,proto3" json:"trader_key,omitempty"`
	// The outputs we'll withdraw funds from the account into.
	Outputs []*Output `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty"`
	//
	//The fee rate, in satoshis per kw, to use for the withdrawal transaction.
	FeeRateSatPerKw uint64 `protobuf:"varint,3,opt,name=fee_rate_sat_per_kw,json=feeRateSatPerKw,proto3" json:"fee_rate_sat_per_kw,omitempty"`
}

func (x *WithdrawAccountRequest) Reset() {
	*x = WithdrawAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawAccountRequest) ProtoMessage() {}

func (x *WithdrawAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawAccountRequest.ProtoReflect.Descriptor instead.
func (*WithdrawAccountRequest) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{10}
}

func (x *WithdrawAccountRequest) GetTraderKey() []byte {
	if x != nil {
		return x.TraderKey
	}
	return nil
}

func (x *WithdrawAccountRequest) GetOutputs() []*Output {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *WithdrawAccountRequest) GetFeeRateSatPerKw() uint64 {
	if x != nil {
		return x.FeeRateSatPerKw
	}
	return 0
}

type WithdrawAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The state of the account after processing the withdrawal.
	Account *Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// The transaction used to withdraw funds from the account.
	WithdrawTxid []byte `protobuf:"bytes,2,opt,name=withdraw_txid,json=withdrawTxid,proto3" json:"withdraw_txid,omitempty"`
}

func (x *WithdrawAccountResponse) Reset() {
	*x = WithdrawAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawAccountResponse) ProtoMessage() {}

func (x *WithdrawAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawAccountResponse.ProtoReflect.Descriptor instead.
func (*WithdrawAccountResponse) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{11}
}

func (x *WithdrawAccountResponse) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *WithdrawAccountResponse) GetWithdrawTxid() []byte {
	if x != nil {
		return x.WithdrawTxid
	}
	return nil
}

type DepositAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The trader key associated with the account that funds will be deposited
	//into.
	TraderKey []byte `protobuf:"bytes,1,opt,name=trader_key,json=traderKey,proto3" json:"trader_key,omitempty"`
	// The amount in satoshis to deposit into the account.
	AmountSat uint64 `protobuf:"varint,2,opt,name=amount_sat,json=amountSat,proto3" json:"amount_sat,omitempty"`
	//
	//The fee rate, in satoshis per kw, to use for the deposit transaction.
	FeeRateSatPerKw uint64 `protobuf:"varint,3,opt,name=fee_rate_sat_per_kw,json=feeRateSatPerKw,proto3" json:"fee_rate_sat_per_kw,omitempty"`
	//
	//A specific address on LND which has UTXOs to withdraw funds from.
	//If specified, DepositAccount() will only use funds which were sent
	//to the specified address. If not specified (default behavior),
	//DepositAccount() will use any available UTXOs for funding.
	LndUtxoAddress []byte `protobuf:"bytes,4,opt,name=lnd_utxo_address,json=lndUtxoAddress,proto3" json:"lnd_utxo_address,omitempty"`
	//
	//If true, allows DepositAccount() to use unconfirmed UTXOs from LND
	//to acquire funds.
	AllowUnconfirmed bool `protobuf:"varint,5,opt,name=allow_unconfirmed,json=allowUnconfirmed,proto3" json:"allow_unconfirmed,omitempty"`
}

func (x *DepositAccountRequest) Reset() {
	*x = DepositAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositAccountRequest) ProtoMessage() {}

func (x *DepositAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositAccountRequest.ProtoReflect.Descriptor instead.
func (*DepositAccountRequest) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{12}
}

func (x *DepositAccountRequest) GetTraderKey() []byte {
	if x != nil {
		return x.TraderKey
	}
	return nil
}

func (x *DepositAccountRequest) GetAmountSat() uint64 {
	if x != nil {
		return x.AmountSat
	}
	return 0
}

func (x *DepositAccountRequest) GetFeeRateSatPerKw() uint64 {
	if x != nil {
		return x.FeeRateSatPerKw
	}
	return 0
}

func (x *DepositAccountRequest) GetLndUtxoAddress() []byte {
	if x != nil {
		return x.LndUtxoAddress
	}
	return nil
}

func (x *DepositAccountRequest) GetAllowUnconfirmed() bool {
	if x != nil {
		return x.AllowUnconfirmed
	}
	return false
}

type DepositAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The state of the account after processing the deposit.
	Account *Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// The transaction used to deposit funds into the account.
	DepositTxid []byte `protobuf:"bytes,2,opt,name=deposit_txid,json=depositTxid,proto3" json:"deposit_txid,omitempty"`
}

func (x *DepositAccountResponse) Reset() {
	*x = DepositAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositAccountResponse) ProtoMessage() {}

func (x *DepositAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositAccountResponse.ProtoReflect.Descriptor instead.
func (*DepositAccountResponse) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{13}
}

func (x *DepositAccountResponse) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *DepositAccountResponse) GetDepositTxid() []byte {
	if x != nil {
		return x.DepositTxid
	}
	return nil
}

type BumpAccountFeeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The trader key associated with the account that will have its fee bumped.
	TraderKey []byte `protobuf:"bytes,1,opt,name=trader_key,json=traderKey,proto3" json:"trader_key,omitempty"`
	//
	//The new fee rate, in satoshis per kw, to use for the child of the account
	//transaction.
	FeeRateSatPerKw uint64 `protobuf:"varint,2,opt,name=fee_rate_sat_per_kw,json=feeRateSatPerKw,proto3" json:"fee_rate_sat_per_kw,omitempty"`
}

func (x *BumpAccountFeeRequest) Reset() {
	*x = BumpAccountFeeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BumpAccountFeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BumpAccountFeeRequest) ProtoMessage() {}

func (x *BumpAccountFeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BumpAccountFeeRequest.ProtoReflect.Descriptor instead.
func (*BumpAccountFeeRequest) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{14}
}

func (x *BumpAccountFeeRequest) GetTraderKey() []byte {
	if x != nil {
		return x.TraderKey
	}
	return nil
}

func (x *BumpAccountFeeRequest) GetFeeRateSatPerKw() uint64 {
	if x != nil {
		return x.FeeRateSatPerKw
	}
	return 0
}

type BumpAccountFeeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BumpAccountFeeResponse) Reset() {
	*x = BumpAccountFeeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BumpAccountFeeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BumpAccountFeeResponse) ProtoMessage() {}

func (x *BumpAccountFeeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BumpAccountFeeResponse.ProtoReflect.Descriptor instead.
func (*BumpAccountFeeResponse) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{15}
}

type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The identifying component of an account. This is the key used for the trader
	//in the 2-of-2 multi-sig construction of an account with an auctioneer.
	TraderKey []byte `protobuf:"bytes,1,opt,name=trader_key,json=traderKey,proto3" json:"trader_key,omitempty"`
	//
	//The current outpoint associated with the account. This will change every
	//time the account has been updated.
	Outpoint *OutPoint `protobuf:"bytes,2,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	// The current total amount of satoshis in the account.
	Value uint64 `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	//
	//The amount of satoshis in the account that is available, meaning not
	//allocated to any oustanding orders.
	AvailableBalance uint64 `protobuf:"varint,4,opt,name=available_balance,json=availableBalance,proto3" json:"available_balance,omitempty"`
	// The height at which the account will expire.
	ExpirationHeight uint32 `protobuf:"varint,5,opt,name=expiration_height,json=expirationHeight,proto3" json:"expiration_height,omitempty"`
	// The current state of the account.
	State AccountState `protobuf:"varint,6,opt,name=state,proto3,enum=poolrpc.AccountState" json:"state,omitempty"`
	// The hash of the account's latest transaction.
	LatestTxid []byte `protobuf:"bytes,7,opt,name=latest_txid,json=latestTxid,proto3" json:"latest_txid,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{16}
}

func (x *Account) GetTraderKey() []byte {
	if x != nil {
		return x.TraderKey
	}
	return nil
}

func (x *Account) GetOutpoint() *OutPoint {
	if x != nil {
		return x.Outpoint
	}
	return nil
}

func (x *Account) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Account) GetAvailableBalance() uint64 {
	if x != nil {
		return x.AvailableBalance
	}
	return 0
}

func (x *Account) GetExpirationHeight() uint32 {
	if x != nil {
		return x.ExpirationHeight
	}
	return 0
}

func (x *Account) GetState() AccountState {
	if x != nil {
		return x.State
	}
	return AccountState_PENDING_OPEN
}

func (x *Account) GetLatestTxid() []byte {
	if x != nil {
		return x.LatestTxid
	}
	return nil
}

type SubmitOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Details:
	//	*SubmitOrderRequest_Ask
	//	*SubmitOrderRequest_Bid
	Details isSubmitOrderRequest_Details `protobuf_oneof:"details"`
}

func (x *SubmitOrderRequest) Reset() {
	*x = SubmitOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitOrderRequest) ProtoMessage() {}

func (x *SubmitOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitOrderRequest.ProtoReflect.Descriptor instead.
func (*SubmitOrderRequest) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{17}
}

func (m *SubmitOrderRequest) GetDetails() isSubmitOrderRequest_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (x *SubmitOrderRequest) GetAsk() *Ask {
	if x, ok := x.GetDetails().(*SubmitOrderRequest_Ask); ok {
		return x.Ask
	}
	return nil
}

func (x *SubmitOrderRequest) GetBid() *Bid {
	if x, ok := x.GetDetails().(*SubmitOrderRequest_Bid); ok {
		return x.Bid
	}
	return nil
}

type isSubmitOrderRequest_Details interface {
	isSubmitOrderRequest_Details()
}

type SubmitOrderRequest_Ask struct {
	Ask *Ask `protobuf:"bytes,1,opt,name=ask,proto3,oneof"`
}

type SubmitOrderRequest_Bid struct {
	Bid *Bid `protobuf:"bytes,2,opt,name=bid,proto3,oneof"`
}

func (*SubmitOrderRequest_Ask) isSubmitOrderRequest_Details() {}

func (*SubmitOrderRequest_Bid) isSubmitOrderRequest_Details() {}

type SubmitOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Details:
	//	*SubmitOrderResponse_InvalidOrder
	//	*SubmitOrderResponse_AcceptedOrderNonce
	Details isSubmitOrderResponse_Details `protobuf_oneof:"details"`
}

func (x *SubmitOrderResponse) Reset() {
	*x = SubmitOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitOrderResponse) ProtoMessage() {}

func (x *SubmitOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitOrderResponse.ProtoReflect.Descriptor instead.
func (*SubmitOrderResponse) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{18}
}

func (m *SubmitOrderResponse) GetDetails() isSubmitOrderResponse_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (x *SubmitOrderResponse) GetInvalidOrder() *InvalidOrder {
	if x, ok := x.GetDetails().(*SubmitOrderResponse_InvalidOrder); ok {
		return x.InvalidOrder
	}
	return nil
}

func (x *SubmitOrderResponse) GetAcceptedOrderNonce() []byte {
	if x, ok := x.GetDetails().(*SubmitOrderResponse_AcceptedOrderNonce); ok {
		return x.AcceptedOrderNonce
	}
	return nil
}

type isSubmitOrderResponse_Details interface {
	isSubmitOrderResponse_Details()
}

type SubmitOrderResponse_InvalidOrder struct {
	//
	//Order failed with the given reason.
	InvalidOrder *InvalidOrder `protobuf:"bytes,1,opt,name=invalid_order,json=invalidOrder,proto3,oneof"`
}

type SubmitOrderResponse_AcceptedOrderNonce struct {
	//
	//The order nonce of the accepted order.
	AcceptedOrderNonce []byte `protobuf:"bytes,2,opt,name=accepted_order_nonce,json=acceptedOrderNonce,proto3,oneof"`
}

func (*SubmitOrderResponse_InvalidOrder) isSubmitOrderResponse_Details() {}

func (*SubmitOrderResponse_AcceptedOrderNonce) isSubmitOrderResponse_Details() {}

type ListOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//Can be set to true to list the orders including all events, which can be
	//very verbose.
	Verbose bool `protobuf:"varint,1,opt,name=verbose,proto3" json:"verbose,omitempty"`
	//
	//Only list orders that are still active.
	ActiveOnly bool `protobuf:"varint,2,opt,name=active_only,json=activeOnly,proto3" json:"active_only,omitempty"`
}

func (x *ListOrdersRequest) Reset() {
	*x = ListOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrdersRequest) ProtoMessage() {}

func (x *ListOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrdersRequest.ProtoReflect.Descriptor instead.
func (*ListOrdersRequest) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{19}
}

func (x *ListOrdersRequest) GetVerbose() bool {
	if x != nil {
		return x.Verbose
	}
	return false
}

func (x *ListOrdersRequest) GetActiveOnly() bool {
	if x != nil {
		return x.ActiveOnly
	}
	return false
}

type ListOrdersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asks []*Ask `protobuf:"bytes,1,rep,name=asks,proto3" json:"asks,omitempty"`
	Bids []*Bid `protobuf:"bytes,2,rep,name=bids,proto3" json:"bids,omitempty"`
}

func (x *ListOrdersResponse) Reset() {
	*x = ListOrdersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrdersResponse) ProtoMessage() {}

func (x *ListOrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrdersResponse.ProtoReflect.Descriptor instead.
func (*ListOrdersResponse) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{20}
}

func (x *ListOrdersResponse) GetAsks() []*Ask {
	if x != nil {
		return x.Asks
	}
	return nil
}

func (x *ListOrdersResponse) GetBids() []*Bid {
	if x != nil {
		return x.Bids
	}
	return nil
}

type CancelOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNonce []byte `protobuf:"bytes,1,opt,name=order_nonce,json=orderNonce,proto3" json:"order_nonce,omitempty"`
}

func (x *CancelOrderRequest) Reset() {
	*x = CancelOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrderRequest) ProtoMessage() {}

func (x *CancelOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrderRequest.ProtoReflect.Descriptor instead.
func (*CancelOrderRequest) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{21}
}

func (x *CancelOrderRequest) GetOrderNonce() []byte {
	if x != nil {
		return x.OrderNonce
	}
	return nil
}

type CancelOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelOrderResponse) Reset() {
	*x = CancelOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrderResponse) ProtoMessage() {}

func (x *CancelOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrderResponse.ProtoReflect.Descriptor instead.
func (*CancelOrderResponse) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{22}
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The trader's account key of the account that is used for the order.
	TraderKey []byte `protobuf:"bytes,1,opt,name=trader_key,json=traderKey,proto3" json:"trader_key,omitempty"`
	//
	//Fixed order rate in parts per billion.
	RateFixed uint32 `protobuf:"varint,2,opt,name=rate_fixed,json=rateFixed,proto3" json:"rate_fixed,omitempty"`
	//
	//Order amount in satoshis.
	Amt uint64 `protobuf:"varint,3,opt,name=amt,proto3" json:"amt,omitempty"`
	//
	//Maximum fee rate the trader is willing to pay for the batch transaction,
	//expressed in satoshis per 1000 weight units (sat/KW).
	MaxBatchFeeRateSatPerKw uint64 `protobuf:"varint,4,opt,name=max_batch_fee_rate_sat_per_kw,json=maxBatchFeeRateSatPerKw,proto3" json:"max_batch_fee_rate_sat_per_kw,omitempty"`
	//
	//Order nonce, acts as unique order identifier.
	OrderNonce []byte `protobuf:"bytes,5,opt,name=order_nonce,json=orderNonce,proto3" json:"order_nonce,omitempty"`
	//
	//The state the order currently is in.
	State OrderState `protobuf:"varint,6,opt,name=state,proto3,enum=poolrpc.OrderState" json:"state,omitempty"`
	//
	//The number of order units the amount corresponds to.
	Units uint32 `protobuf:"varint,7,opt,name=units,proto3" json:"units,omitempty"`
	//
	//The number of currently unfilled units of this order. This will be equal to
	//the total amount of units until the order has reached the state PARTIAL_FILL
	//or EXECUTED.
	UnitsUnfulfilled uint32 `protobuf:"varint,8,opt,name=units_unfulfilled,json=unitsUnfulfilled,proto3" json:"units_unfulfilled,omitempty"`
	// The value reserved from the account by this order to ensure the account
	// can pay execution and chain fees in case it gets matched.
	ReservedValueSat uint64 `protobuf:"varint,9,opt,name=reserved_value_sat,json=reservedValueSat,proto3" json:"reserved_value_sat,omitempty"`
	// The unix timestamp in nanoseconds the order was first created/submitted.
	CreationTimestampNs uint64 `protobuf:"varint,10,opt,name=creation_timestamp_ns,json=creationTimestampNs,proto3" json:"creation_timestamp_ns,omitempty"`
	//
	//A list of events that were emitted for this order. This field is only set
	//when the verbose flag is set to true in the request.
	Events []*OrderEvent `protobuf:"bytes,11,rep,name=events,proto3" json:"events,omitempty"`
	// The minimum number of order units that must be matched per order pair.
	MinUnitsMatch uint32 `protobuf:"varint,12,opt,name=min_units_match,json=minUnitsMatch,proto3" json:"min_units_match,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{23}
}

func (x *Order) GetTraderKey() []byte {
	if x != nil {
		return x.TraderKey
	}
	return nil
}

func (x *Order) GetRateFixed() uint32 {
	if x != nil {
		return x.RateFixed
	}
	return 0
}

func (x *Order) GetAmt() uint64 {
	if x != nil {
		return x.Amt
	}
	return 0
}

func (x *Order) GetMaxBatchFeeRateSatPerKw() uint64 {
	if x != nil {
		return x.MaxBatchFeeRateSatPerKw
	}
	return 0
}

func (x *Order) GetOrderNonce() []byte {
	if x != nil {
		return x.OrderNonce
	}
	return nil
}

func (x *Order) GetState() OrderState {
	if x != nil {
		return x.State
	}
	return OrderState_ORDER_SUBMITTED
}

func (x *Order) GetUnits() uint32 {
	if x != nil {
		return x.Units
	}
	return 0
}

func (x *Order) GetUnitsUnfulfilled() uint32 {
	if x != nil {
		return x.UnitsUnfulfilled
	}
	return 0
}

func (x *Order) GetReservedValueSat() uint64 {
	if x != nil {
		return x.ReservedValueSat
	}
	return 0
}

func (x *Order) GetCreationTimestampNs() uint64 {
	if x != nil {
		return x.CreationTimestampNs
	}
	return 0
}

func (x *Order) GetEvents() []*OrderEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *Order) GetMinUnitsMatch() uint32 {
	if x != nil {
		return x.MinUnitsMatch
	}
	return 0
}

type Bid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The common fields shared between both ask and bid order types.
	Details *Order `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	//
	//Required number of blocks that a channel opened as a result of this bid
	//should be kept open.
	LeaseDurationBlocks uint32 `protobuf:"varint,2,opt,name=lease_duration_blocks,json=leaseDurationBlocks,proto3" json:"lease_duration_blocks,omitempty"`
	//
	//The version of the order format that is used. Will be increased once new
	//features are added.
	Version uint32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	//
	//The minium node tier this order should be matched with. Only asks backed by
	//a node this tier or higher will be eligible for matching with this bid.
	MinNodeTier NodeTier `protobuf:"varint,4,opt,name=min_node_tier,json=minNodeTier,proto3,enum=poolrpc.NodeTier" json:"min_node_tier,omitempty"`
}

func (x *Bid) Reset() {
	*x = Bid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bid) ProtoMessage() {}

func (x *Bid) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bid.ProtoReflect.Descriptor instead.
func (*Bid) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{24}
}

func (x *Bid) GetDetails() *Order {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *Bid) GetLeaseDurationBlocks() uint32 {
	if x != nil {
		return x.LeaseDurationBlocks
	}
	return 0
}

func (x *Bid) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Bid) GetMinNodeTier() NodeTier {
	if x != nil {
		return x.MinNodeTier
	}
	return NodeTier_TIER_DEFAULT
}

type Ask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The common fields shared between both ask and bid order types.
	Details *Order `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	//
	//The number of blocks the liquidity provider is willing to provide the
	//channel funds for.
	LeaseDurationBlocks uint32 `protobuf:"varint,2,opt,name=lease_duration_blocks,json=leaseDurationBlocks,proto3" json:"lease_duration_blocks,omitempty"`
	//
	//The version of the order format that is used. Will be increased once new
	//features are added.
	Version uint32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Ask) Reset() {
	*x = Ask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ask) ProtoMessage() {}

func (x *Ask) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ask.ProtoReflect.Descriptor instead.
func (*Ask) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{25}
}

func (x *Ask) GetDetails() *Order {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *Ask) GetLeaseDurationBlocks() uint32 {
	if x != nil {
		return x.LeaseDurationBlocks
	}
	return 0
}

func (x *Ask) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type OrderEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The unix timestamp in nanoseconds the event was emitted at. This is the
	//primary key of the event and is unique across the database.
	TimestampNs int64 `protobuf:"varint,1,opt,name=timestamp_ns,json=timestampNs,proto3" json:"timestamp_ns,omitempty"`
	// The human readable representation of the event.
	EventStr string `protobuf:"bytes,2,opt,name=event_str,json=eventStr,proto3" json:"event_str,omitempty"`
	// Types that are assignable to Event:
	//	*OrderEvent_StateChange
	//	*OrderEvent_Matched
	Event isOrderEvent_Event `protobuf_oneof:"event"`
}

func (x *OrderEvent) Reset() {
	*x = OrderEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderEvent) ProtoMessage() {}

func (x *OrderEvent) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderEvent.ProtoReflect.Descriptor instead.
func (*OrderEvent) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{26}
}

func (x *OrderEvent) GetTimestampNs() int64 {
	if x != nil {
		return x.TimestampNs
	}
	return 0
}

func (x *OrderEvent) GetEventStr() string {
	if x != nil {
		return x.EventStr
	}
	return ""
}

func (m *OrderEvent) GetEvent() isOrderEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *OrderEvent) GetStateChange() *UpdatedEvent {
	if x, ok := x.GetEvent().(*OrderEvent_StateChange); ok {
		return x.StateChange
	}
	return nil
}

func (x *OrderEvent) GetMatched() *MatchEvent {
	if x, ok := x.GetEvent().(*OrderEvent_Matched); ok {
		return x.Matched
	}
	return nil
}

type isOrderEvent_Event interface {
	isOrderEvent_Event()
}

type OrderEvent_StateChange struct {
	// The order was updated in the database.
	StateChange *UpdatedEvent `protobuf:"bytes,3,opt,name=state_change,json=stateChange,proto3,oneof"`
}

type OrderEvent_Matched struct {
	// The order was involved in a match making attempt.
	Matched *MatchEvent `protobuf:"bytes,4,opt,name=matched,proto3,oneof"`
}

func (*OrderEvent_StateChange) isOrderEvent_Event() {}

func (*OrderEvent_Matched) isOrderEvent_Event() {}

type UpdatedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The state of the order previous to the change. This is what the state
	//changed from.
	PreviousState OrderState `protobuf:"varint,1,opt,name=previous_state,json=previousState,proto3,enum=poolrpc.OrderState" json:"previous_state,omitempty"`
	//
	//The new state of the order after the change. This is what the state changed
	//to.
	NewState OrderState `protobuf:"varint,2,opt,name=new_state,json=newState,proto3,enum=poolrpc.OrderState" json:"new_state,omitempty"`
	// The units that were filled at the time of the event.
	UnitsFilled uint32 `protobuf:"varint,3,opt,name=units_filled,json=unitsFilled,proto3" json:"units_filled,omitempty"`
}

func (x *UpdatedEvent) Reset() {
	*x = UpdatedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatedEvent) ProtoMessage() {}

func (x *UpdatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatedEvent.ProtoReflect.Descriptor instead.
func (*UpdatedEvent) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{27}
}

func (x *UpdatedEvent) GetPreviousState() OrderState {
	if x != nil {
		return x.PreviousState
	}
	return OrderState_ORDER_SUBMITTED
}

func (x *UpdatedEvent) GetNewState() OrderState {
	if x != nil {
		return x.NewState
	}
	return OrderState_ORDER_SUBMITTED
}

func (x *UpdatedEvent) GetUnitsFilled() uint32 {
	if x != nil {
		return x.UnitsFilled
	}
	return 0
}

type MatchEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The state of the match making process the order went through.
	MatchState MatchState `protobuf:"varint,1,opt,name=match_state,json=matchState,proto3,enum=poolrpc.MatchState" json:"match_state,omitempty"`
	// The number of units that would be (or were) filled with this match.
	UnitsFilled uint32 `protobuf:"varint,2,opt,name=units_filled,json=unitsFilled,proto3" json:"units_filled,omitempty"`
	// The nonce of the order we were matched to.
	MatchedOrder []byte `protobuf:"bytes,3,opt,name=matched_order,json=matchedOrder,proto3" json:"matched_order,omitempty"`
	//
	//The reason why the trader daemon rejected the order. Is only set if
	//match_state is set to REJECTED.
	RejectReason MatchRejectReason `protobuf:"varint,4,opt,name=reject_reason,json=rejectReason,proto3,enum=poolrpc.MatchRejectReason" json:"reject_reason,omitempty"`
}

func (x *MatchEvent) Reset() {
	*x = MatchEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchEvent) ProtoMessage() {}

func (x *MatchEvent) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchEvent.ProtoReflect.Descriptor instead.
func (*MatchEvent) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{28}
}

func (x *MatchEvent) GetMatchState() MatchState {
	if x != nil {
		return x.MatchState
	}
	return MatchState_PREPARE
}

func (x *MatchEvent) GetUnitsFilled() uint32 {
	if x != nil {
		return x.UnitsFilled
	}
	return 0
}

func (x *MatchEvent) GetMatchedOrder() []byte {
	if x != nil {
		return x.MatchedOrder
	}
	return nil
}

func (x *MatchEvent) GetRejectReason() MatchRejectReason {
	if x != nil {
		return x.RejectReason
	}
	return MatchRejectReason_NONE
}

type RecoverAccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RecoverAccountsRequest) Reset() {
	*x = RecoverAccountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoverAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverAccountsRequest) ProtoMessage() {}

func (x *RecoverAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverAccountsRequest.ProtoReflect.Descriptor instead.
func (*RecoverAccountsRequest) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{29}
}

type RecoverAccountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of accounts that were recovered.
	NumRecoveredAccounts uint32 `protobuf:"varint,1,opt,name=num_recovered_accounts,json=numRecoveredAccounts,proto3" json:"num_recovered_accounts,omitempty"`
}

func (x *RecoverAccountsResponse) Reset() {
	*x = RecoverAccountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoverAccountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverAccountsResponse) ProtoMessage() {}

func (x *RecoverAccountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverAccountsResponse.ProtoReflect.Descriptor instead.
func (*RecoverAccountsResponse) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{30}
}

func (x *RecoverAccountsResponse) GetNumRecoveredAccounts() uint32 {
	if x != nil {
		return x.NumRecoveredAccounts
	}
	return 0
}

type AuctionFeeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AuctionFeeRequest) Reset() {
	*x = AuctionFeeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionFeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionFeeRequest) ProtoMessage() {}

func (x *AuctionFeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionFeeRequest.ProtoReflect.Descriptor instead.
func (*AuctionFeeRequest) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{31}
}

type AuctionFeeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The execution fee charged per matched order.
	ExecutionFee *ExecutionFee `protobuf:"bytes,1,opt,name=execution_fee,json=executionFee,proto3" json:"execution_fee,omitempty"`
}

func (x *AuctionFeeResponse) Reset() {
	*x = AuctionFeeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionFeeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionFeeResponse) ProtoMessage() {}

func (x *AuctionFeeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionFeeResponse.ProtoReflect.Descriptor instead.
func (*AuctionFeeResponse) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{32}
}

func (x *AuctionFeeResponse) GetExecutionFee() *ExecutionFee {
	if x != nil {
		return x.ExecutionFee
	}
	return nil
}

type Lease struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The outpoint of the channel created.
	ChannelPoint *OutPoint `protobuf:"bytes,1,opt,name=channel_point,json=channelPoint,proto3" json:"channel_point,omitempty"`
	// The amount, in satoshis, of the channel created.
	ChannelAmtSat uint64 `protobuf:"varint,2,opt,name=channel_amt_sat,json=channelAmtSat,proto3" json:"channel_amt_sat,omitempty"`
	// The intended duration, in blocks, of the channel created.
	ChannelDurationBlocks uint32 `protobuf:"varint,3,opt,name=channel_duration_blocks,json=channelDurationBlocks,proto3" json:"channel_duration_blocks,omitempty"`
	// The absolute height that this channel lease expires.
	ChannelLeaseExpiry uint32 `protobuf:"varint,4,opt,name=channel_lease_expiry,json=channelLeaseExpiry,proto3" json:"channel_lease_expiry,omitempty"`
	//
	//The premium, in satoshis, either paid or received for the offered liquidity.
	PremiumSat uint64 `protobuf:"varint,5,opt,name=premium_sat,json=premiumSat,proto3" json:"premium_sat,omitempty"`
	//
	//The execution fee, in satoshis, charged by the auctioneer for the channel
	//created.
	ExecutionFeeSat uint64 `protobuf:"varint,6,opt,name=execution_fee_sat,json=executionFeeSat,proto3" json:"execution_fee_sat,omitempty"`
	//
	//The fee, in satoshis, charged by the auctioneer for the batch execution
	//transaction that created this lease.
	ChainFeeSat uint64 `protobuf:"varint,7,opt,name=chain_fee_sat,json=chainFeeSat,proto3" json:"chain_fee_sat,omitempty"`
	//
	//The actual fixed rate expressed in parts per billionth this lease was
	//bought/sold at.
	ClearingRatePrice uint64 `protobuf:"varint,8,opt,name=clearing_rate_price,json=clearingRatePrice,proto3" json:"clearing_rate_price,omitempty"`
	//
	//The actual fixed rate of the bid/ask, this should always be 'better' than
	//the clearing_rate_price.
	OrderFixedRate uint64 `protobuf:"varint,9,opt,name=order_fixed_rate,json=orderFixedRate,proto3" json:"order_fixed_rate,omitempty"`
	// The order executed that resulted in the channel created.
	OrderNonce []byte `protobuf:"bytes,10,opt,name=order_nonce,json=orderNonce,proto3" json:"order_nonce,omitempty"`
	// Whether this channel was purchased from another trader or not.
	Purchased bool `protobuf:"varint,11,opt,name=purchased,proto3" json:"purchased,omitempty"`
	// The pubkey of the node that this channel was bought/sold from.
	ChannelRemoteNodeKey []byte `protobuf:"bytes,12,opt,name=channel_remote_node_key,json=channelRemoteNodeKey,proto3" json:"channel_remote_node_key,omitempty"`
	// The tier of the node that this channel was bought/sold from.
	ChannelNodeTier NodeTier `protobuf:"varint,13,opt,name=channel_node_tier,json=channelNodeTier,proto3,enum=poolrpc.NodeTier" json:"channel_node_tier,omitempty"`
}

func (x *Lease) Reset() {
	*x = Lease{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lease) ProtoMessage() {}

func (x *Lease) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lease.ProtoReflect.Descriptor instead.
func (*Lease) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{33}
}

func (x *Lease) GetChannelPoint() *OutPoint {
	if x != nil {
		return x.ChannelPoint
	}
	return nil
}

func (x *Lease) GetChannelAmtSat() uint64 {
	if x != nil {
		return x.ChannelAmtSat
	}
	return 0
}

func (x *Lease) GetChannelDurationBlocks() uint32 {
	if x != nil {
		return x.ChannelDurationBlocks
	}
	return 0
}

func (x *Lease) GetChannelLeaseExpiry() uint32 {
	if x != nil {
		return x.ChannelLeaseExpiry
	}
	return 0
}

func (x *Lease) GetPremiumSat() uint64 {
	if x != nil {
		return x.PremiumSat
	}
	return 0
}

func (x *Lease) GetExecutionFeeSat() uint64 {
	if x != nil {
		return x.ExecutionFeeSat
	}
	return 0
}

func (x *Lease) GetChainFeeSat() uint64 {
	if x != nil {
		return x.ChainFeeSat
	}
	return 0
}

func (x *Lease) GetClearingRatePrice() uint64 {
	if x != nil {
		return x.ClearingRatePrice
	}
	return 0
}

func (x *Lease) GetOrderFixedRate() uint64 {
	if x != nil {
		return x.OrderFixedRate
	}
	return 0
}

func (x *Lease) GetOrderNonce() []byte {
	if x != nil {
		return x.OrderNonce
	}
	return nil
}

func (x *Lease) GetPurchased() bool {
	if x != nil {
		return x.Purchased
	}
	return false
}

func (x *Lease) GetChannelRemoteNodeKey() []byte {
	if x != nil {
		return x.ChannelRemoteNodeKey
	}
	return nil
}

func (x *Lease) GetChannelNodeTier() NodeTier {
	if x != nil {
		return x.ChannelNodeTier
	}
	return NodeTier_TIER_DEFAULT
}

type LeasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//An optional list of batches to retrieve the leases of. If empty, leases
	//throughout all batches are returned.
	BatchIds [][]byte `protobuf:"bytes,1,rep,name=batch_ids,json=batchIds,proto3" json:"batch_ids,omitempty"`
	//
	//An optional list of accounts to retrieve the leases of. If empty, leases
	//for all accounts are returned.
	Accounts [][]byte `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *LeasesRequest) Reset() {
	*x = LeasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeasesRequest) ProtoMessage() {}

func (x *LeasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeasesRequest.ProtoReflect.Descriptor instead.
func (*LeasesRequest) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{34}
}

func (x *LeasesRequest) GetBatchIds() [][]byte {
	if x != nil {
		return x.BatchIds
	}
	return nil
}

func (x *LeasesRequest) GetAccounts() [][]byte {
	if x != nil {
		return x.Accounts
	}
	return nil
}

type LeasesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The relevant list of leases purchased or sold within the auction.
	Leases []*Lease `protobuf:"bytes,1,rep,name=leases,proto3" json:"leases,omitempty"`
	// The total amount of satoshis earned from the leases returned.
	TotalAmtEarnedSat uint64 `protobuf:"varint,2,opt,name=total_amt_earned_sat,json=totalAmtEarnedSat,proto3" json:"total_amt_earned_sat,omitempty"`
	// The total amount of satoshis paid for the leases returned.
	TotalAmtPaidSat uint64 `protobuf:"varint,3,opt,name=total_amt_paid_sat,json=totalAmtPaidSat,proto3" json:"total_amt_paid_sat,omitempty"`
}

func (x *LeasesResponse) Reset() {
	*x = LeasesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeasesResponse) ProtoMessage() {}

func (x *LeasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeasesResponse.ProtoReflect.Descriptor instead.
func (*LeasesResponse) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{35}
}

func (x *LeasesResponse) GetLeases() []*Lease {
	if x != nil {
		return x.Leases
	}
	return nil
}

func (x *LeasesResponse) GetTotalAmtEarnedSat() uint64 {
	if x != nil {
		return x.TotalAmtEarnedSat
	}
	return 0
}

func (x *LeasesResponse) GetTotalAmtPaidSat() uint64 {
	if x != nil {
		return x.TotalAmtPaidSat
	}
	return 0
}

type TokensRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TokensRequest) Reset() {
	*x = TokensRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokensRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokensRequest) ProtoMessage() {}

func (x *TokensRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokensRequest.ProtoReflect.Descriptor instead.
func (*TokensRequest) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{36}
}

type TokensResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	//List of all tokens the daemon knows of, including old/expired tokens.
	Tokens []*LsatToken `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *TokensResponse) Reset() {
	*x = TokensResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokensResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokensResponse) ProtoMessage() {}

func (x *TokensResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokensResponse.ProtoReflect.Descriptor instead.
func (*TokensResponse) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{37}
}

func (x *TokensResponse) GetTokens() []*LsatToken {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type LsatToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	//The base macaroon that was baked by the auth server.
	BaseMacaroon []byte `protobuf:"bytes,1,opt,name=base_macaroon,json=baseMacaroon,proto3" json:"base_macaroon,omitempty"`
	//*
	//The payment hash of the payment that was paid to obtain the token.
	PaymentHash []byte `protobuf:"bytes,2,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty"`
	//*
	//The preimage of the payment hash, knowledge of this is proof that the
	//payment has been paid. If the preimage is set to all zeros, this means the
	//payment is still pending and the token is not yet fully valid.
	PaymentPreimage []byte `protobuf:"bytes,3,opt,name=payment_preimage,json=paymentPreimage,proto3" json:"payment_preimage,omitempty"`
	//*
	//The amount of millisatoshis that was paid to get the token.
	AmountPaidMsat int64 `protobuf:"varint,4,opt,name=amount_paid_msat,json=amountPaidMsat,proto3" json:"amount_paid_msat,omitempty"`
	//*
	//The amount of millisatoshis paid in routing fee to pay for the token.
	RoutingFeePaidMsat int64 `protobuf:"varint,5,opt,name=routing_fee_paid_msat,json=routingFeePaidMsat,proto3" json:"routing_fee_paid_msat,omitempty"`
	//*
	//The creation time of the token as UNIX timestamp in seconds.
	TimeCreated int64 `protobuf:"varint,6,opt,name=time_created,json=timeCreated,proto3" json:"time_created,omitempty"`
	//*
	//Indicates whether the token is expired or still valid.
	Expired bool `protobuf:"varint,7,opt,name=expired,proto3" json:"expired,omitempty"`
	//*
	//Identifying attribute of this token in the store. Currently represents the
	//file name of the token where it's stored on the file system.
	StorageName string `protobuf:"bytes,8,opt,name=storage_name,json=storageName,proto3" json:"storage_name,omitempty"`
}

func (x *LsatToken) Reset() {
	*x = LsatToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LsatToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LsatToken) ProtoMessage() {}

func (x *LsatToken) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LsatToken.ProtoReflect.Descriptor instead.
func (*LsatToken) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{38}
}

func (x *LsatToken) GetBaseMacaroon() []byte {
	if x != nil {
		return x.BaseMacaroon
	}
	return nil
}

func (x *LsatToken) GetPaymentHash() []byte {
	if x != nil {
		return x.PaymentHash
	}
	return nil
}

func (x *LsatToken) GetPaymentPreimage() []byte {
	if x != nil {
		return x.PaymentPreimage
	}
	return nil
}

func (x *LsatToken) GetAmountPaidMsat() int64 {
	if x != nil {
		return x.AmountPaidMsat
	}
	return 0
}

func (x *LsatToken) GetRoutingFeePaidMsat() int64 {
	if x != nil {
		return x.RoutingFeePaidMsat
	}
	return 0
}

func (x *LsatToken) GetTimeCreated() int64 {
	if x != nil {
		return x.TimeCreated
	}
	return 0
}

func (x *LsatToken) GetExpired() bool {
	if x != nil {
		return x.Expired
	}
	return false
}

func (x *LsatToken) GetStorageName() string {
	if x != nil {
		return x.StorageName
	}
	return ""
}

type LeaseDurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LeaseDurationRequest) Reset() {
	*x = LeaseDurationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaseDurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaseDurationRequest) ProtoMessage() {}

func (x *LeaseDurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaseDurationRequest.ProtoReflect.Descriptor instead.
func (*LeaseDurationRequest) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{39}
}

type LeaseDurationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaseDurations map[uint32]bool `protobuf:"bytes,1,rep,name=lease_durations,json=leaseDurations,proto3" json:"lease_durations,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *LeaseDurationResponse) Reset() {
	*x = LeaseDurationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaseDurationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaseDurationResponse) ProtoMessage() {}

func (x *LeaseDurationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaseDurationResponse.ProtoReflect.Descriptor instead.
func (*LeaseDurationResponse) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{40}
}

func (x *LeaseDurationResponse) GetLeaseDurations() map[uint32]bool {
	if x != nil {
		return x.LeaseDurations
	}
	return nil
}

type NextBatchInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NextBatchInfoRequest) Reset() {
	*x = NextBatchInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextBatchInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextBatchInfoRequest) ProtoMessage() {}

func (x *NextBatchInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextBatchInfoRequest.ProtoReflect.Descriptor instead.
func (*NextBatchInfoRequest) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{41}
}

type NextBatchInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The confirmation target the auctioneer will use for fee estimation of the
	//next batch.
	ConfTarget uint32 `protobuf:"varint,5,opt,name=conf_target,json=confTarget,proto3" json:"conf_target,omitempty"`
	//
	//The fee rate, in satoshis per kiloweight, estimated by the auctioneer to use
	//for the next batch.
	FeeRateSatPerKw uint64 `protobuf:"varint,6,opt,name=fee_rate_sat_per_kw,json=feeRateSatPerKw,proto3" json:"fee_rate_sat_per_kw,omitempty"`
	//
	//The absolute unix timestamp in seconds at which the auctioneer will attempt
	//to clear the next batch.
	ClearTimestamp uint64 `protobuf:"varint,7,opt,name=clear_timestamp,json=clearTimestamp,proto3" json:"clear_timestamp,omitempty"`
}

func (x *NextBatchInfoResponse) Reset() {
	*x = NextBatchInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextBatchInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextBatchInfoResponse) ProtoMessage() {}

func (x *NextBatchInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextBatchInfoResponse.ProtoReflect.Descriptor instead.
func (*NextBatchInfoResponse) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{42}
}

func (x *NextBatchInfoResponse) GetConfTarget() uint32 {
	if x != nil {
		return x.ConfTarget
	}
	return 0
}

func (x *NextBatchInfoResponse) GetFeeRateSatPerKw() uint64 {
	if x != nil {
		return x.FeeRateSatPerKw
	}
	return 0
}

func (x *NextBatchInfoResponse) GetClearTimestamp() uint64 {
	if x != nil {
		return x.ClearTimestamp
	}
	return 0
}

type NodeRatingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The target node to obtain ratings information for.
	NodePubkeys [][]byte `protobuf:"bytes,1,rep,name=node_pubkeys,json=nodePubkeys,proto3" json:"node_pubkeys,omitempty"`
}

func (x *NodeRatingRequest) Reset() {
	*x = NodeRatingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeRatingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeRatingRequest) ProtoMessage() {}

func (x *NodeRatingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeRatingRequest.ProtoReflect.Descriptor instead.
func (*NodeRatingRequest) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{43}
}

func (x *NodeRatingRequest) GetNodePubkeys() [][]byte {
	if x != nil {
		return x.NodePubkeys
	}
	return nil
}

type NodeRatingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A series of node ratings for each of the queried nodes.
	NodeRatings []*NodeRating `protobuf:"bytes,1,rep,name=node_ratings,json=nodeRatings,proto3" json:"node_ratings,omitempty"`
}

func (x *NodeRatingResponse) Reset() {
	*x = NodeRatingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trader_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeRatingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeRatingResponse) ProtoMessage() {}

func (x *NodeRatingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeRatingResponse.ProtoReflect.Descriptor instead.
func (*NodeRatingResponse) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{44}
}

func (x *NodeRatingResponse) GetNodeRatings() []*NodeRating {
	if x != nil {
		return x.NodeRatings
	}
	return nil
}

var File_trader_proto protoreflect.FileDescriptor

var file_trader_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07,
	0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcc, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x69, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0e,
	0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x29,
	0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x21, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x66, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x10, 0x0a, 0x0e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x42, 0x06,
	0x0a, 0x04, 0x66, 0x65, 0x65, 0x73, 0x22, 0x65, 0x0a, 0x13, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x66, 0x65, 0x65, 0x73, 0x22, 0x77, 0x0a,
	0x14, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x19, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x66,
	0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x61, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x6b, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x46,
	0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x53, 0x61, 0x74, 0x50, 0x65, 0x72, 0x4b, 0x77, 0x12, 0x26,
	0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x46, 0x65,
	0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x36, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x44,
	0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72,
	0x70, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x22, 0x3f, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x0d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x46, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x21, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x61, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6b, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x53, 0x61, 0x74, 0x50,
	0x65, 0x72, 0x4b, 0x77, 0x42, 0x06, 0x0a, 0x04, 0x66, 0x65, 0x65, 0x73, 0x22, 0x43, 0x0a, 0x16,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6d, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x46, 0x65, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70,
	0x63, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x22, 0xc8, 0x01, 0x0a, 0x13, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x57, 0x69, 0x74, 0x68, 0x46, 0x65, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x57, 0x69, 0x74, 0x68, 0x46, 0x65, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6f,
	0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x46, 0x65, 0x65, 0x48, 0x00, 0x52, 0x07,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x66, 0x75, 0x6e, 0x64, 0x73,
	0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x14,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x78,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54,
	0x78, 0x69, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x16, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a,
	0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52,
	0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x13, 0x66, 0x65, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x61, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6b, 0x77, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x66, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x53, 0x61,
	0x74, 0x50, 0x65, 0x72, 0x4b, 0x77, 0x22, 0x6a, 0x0a, 0x17, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x78, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x78,
	0x69, 0x64, 0x22, 0xda, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x61, 0x74, 0x12, 0x2c, 0x0a, 0x13, 0x66, 0x65,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x61, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6b,
	0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x66, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x53, 0x61, 0x74, 0x50, 0x65, 0x72, 0x4b, 0x77, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6e, 0x64, 0x5f,
	0x75, 0x74, 0x78, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0e, 0x6c, 0x6e, 0x64, 0x55, 0x74, 0x78, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x75, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x22,
	0x67, 0x0a, 0x16, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x6f, 0x6f,
	0x6c, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x5f, 0x74, 0x78, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x54, 0x78, 0x69, 0x64, 0x22, 0x64, 0x0a, 0x15, 0x42, 0x75, 0x6d, 0x70,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79,
	0x12, 0x2c, 0x0a, 0x13, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x61, 0x74,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6b, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x66,
	0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x53, 0x61, 0x74, 0x50, 0x65, 0x72, 0x4b, 0x77, 0x22, 0x18,
	0x0a, 0x16, 0x42, 0x75, 0x6d, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x65, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x95, 0x02, 0x0a, 0x07, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x4b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e,
	0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x78, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54, 0x78, 0x69, 0x64,
	0x22, 0x63, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x03, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73,
	0x6b, 0x48, 0x00, 0x52, 0x03, 0x61, 0x73, 0x6b, 0x12, 0x20, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e,
	0x42, 0x69, 0x64, 0x48, 0x00, 0x52, 0x03, 0x62, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a,
	0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x12, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x4e, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x58, 0x0a, 0x12, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x20, 0x0a, 0x04, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x6b, 0x52, 0x04, 0x61, 0x73,
	0x6b, 0x73, 0x12, 0x20, 0x0a, 0x04, 0x62, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x04,
	0x62, 0x69, 0x64, 0x73, 0x22, 0x35, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xdd, 0x03, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x72, 0x61, 0x74, 0x65, 0x46, 0x69, 0x78, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6d,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x61, 0x6d, 0x74, 0x12, 0x3e, 0x0a, 0x1d,
	0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x61, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6b, 0x77, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x42, 0x61, 0x74, 0x63, 0x68, 0x46, 0x65, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x53, 0x61, 0x74, 0x50, 0x65, 0x72, 0x4b, 0x77, 0x12, 0x1f, 0x0a, 0x0b,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70,
	0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x2b,
	0x0a, 0x11, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x75, 0x6e, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x75, 0x6e, 0x69, 0x74, 0x73,
	0x55, 0x6e, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x61,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x61, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f,
	0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x73, 0x12, 0x2b, 0x0a,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69,
	0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x22, 0xb4, 0x01, 0x0a, 0x03, 0x42, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f,
	0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74,
	0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x6f, 0x6f, 0x6c,
	0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x69, 0x65, 0x72, 0x52, 0x0b, 0x6d, 0x69,
	0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x69, 0x65, 0x72, 0x22, 0x7d, 0x0a, 0x03, 0x41, 0x73, 0x6b,
	0x12, 0x28, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xc2, 0x01, 0x0a, 0x0a, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x9f, 0x01,
	0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3a,
	0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x6e, 0x65,
	0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x22,
	0xcb, 0x01, 0x0a, 0x0a, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x34,
	0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x66, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x74,
	0x73, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0d,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52,
	0x0c, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x18, 0x0a,
	0x16, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4f, 0x0a, 0x17, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x41, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x50, 0x0a,
	0x12, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6f,
	0x6c, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65,
	0x65, 0x52, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x22,
	0xd1, 0x04, 0x0a, 0x05, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x6d, 0x74,
	0x5f, 0x73, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x41, 0x6d, 0x74, 0x53, 0x61, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x73,
	0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75,
	0x6d, 0x53, 0x61, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x73, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x53, 0x61, 0x74,
	0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x73, 0x61,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x46, 0x65,
	0x65, 0x53, 0x61, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x11, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x12, 0x35, 0x0a,
	0x17, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x69,
	0x65, 0x72, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x69, 0x65, 0x72, 0x22, 0x48, 0x0a, 0x0d, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x96, 0x01,
	0x0a, 0x0e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x26, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x52, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x61, 0x6d, 0x74, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x74,
	0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x61, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x74, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x73, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x74, 0x50,
	0x61, 0x69, 0x64, 0x53, 0x61, 0x74, 0x22, 0x0f, 0x0a, 0x0d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3c, 0x0a, 0x0e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x6f, 0x6f, 0x6c,
	0x72, 0x70, 0x63, 0x2e, 0x4c, 0x73, 0x61, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x06, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0xbb, 0x02, 0x0a, 0x09, 0x4c, 0x73, 0x61, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x61,
	0x72, 0x6f, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65,
	0x4d, 0x61, 0x63, 0x61, 0x72, 0x6f, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x69, 0x64, 0x4d, 0x73, 0x61, 0x74,
	0x12, 0x31, 0x0a, 0x15, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x5f,
	0x70, 0x61, 0x69, 0x64, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x50, 0x61, 0x69, 0x64, 0x4d,
	0x73, 0x61, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x15,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x41, 0x0a, 0x13, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x16, 0x0a, 0x14, 0x4e, 0x65, 0x78, 0x74, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x8f, 0x01,
	0x0a, 0x15, 0x4e, 0x65, 0x78, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x66, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x13, 0x66, 0x65, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x61, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6b, 0x77, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x66, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x53, 0x61,
	0x74, 0x50, 0x65, 0x72, 0x4b, 0x77, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0x36, 0x0a, 0x11, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65,
	0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x4c, 0x0a, 0x12, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2a, 0x93, 0x01, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x4f, 0x50, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43,
	0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x4f, 0x53, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x10, 0x07, 0x2a, 0x50, 0x0a, 0x0a, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x45,
	0x50, 0x41, 0x52, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0d,
	0x0a, 0x09, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x04, 0x2a, 0xbe, 0x01,
	0x0a, 0x11, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x4d, 0x49, 0x53, 0x42, 0x45, 0x48, 0x41, 0x56,
	0x49, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10,
	0x02, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x41, 0x54, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x03,
	0x12, 0x21, 0x0a, 0x1d, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x45,
	0x52, 0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x52,
	0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x46, 0x55,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x32, 0xa2,
	0x10, 0x0a, 0x06, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x12, 0x6f, 0x0a, 0x0c, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x2e, 0x70, 0x6f, 0x6f, 0x6c,
	0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70,
	0x63, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x5a, 0x0a, 0x0b, 0x49, 0x6e,
	0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x70, 0x6f, 0x6f, 0x6c,
	0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16,
	0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x66, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x66,
	0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c,
	0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70,
	0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x13, 0x2a, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x7b, 0x0a, 0x0f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x70, 0x6f, 0x6f, 0x6c,
	0x72, 0x70, 0x63, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x6f, 0x6f,
	0x6c, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x3a, 0x01, 0x2a, 0x12, 0x77, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x2f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x74, 0x0a, 0x0e,
	0x42, 0x75, 0x6d, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x12, 0x1e,
	0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x75, 0x6d, 0x70, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x75, 0x6d, 0x70, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6f,
	0x6c, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x62, 0x75, 0x6d, 0x70, 0x3a,
	0x01, 0x2a, 0x12, 0x7a, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e,
	0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x64,
	0x0a, 0x0b, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x2e,
	0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x6f, 0x6f,
	0x6c, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14,
	0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x3a, 0x01, 0x2a, 0x12, 0x5e, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x1a, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x6f, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x2a, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6f, 0x6c,
	0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x7d, 0x12, 0x5b, 0x0a, 0x0a, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x65, 0x65, 0x12, 0x1a, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x66,
	0x65, 0x65, 0x12, 0x71, 0x0a, 0x0e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6b, 0x0a, 0x0d, 0x4e, 0x65, 0x78, 0x74, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63,
	0x2e, 0x4e, 0x65, 0x78, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e,
	0x4e, 0x65, 0x78, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x6e, 0x65,
	0x78, 0x74, 0x12, 0x6f, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x12, 0x1d, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x12, 0x59, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4c, 0x73, 0x61, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70,
	0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f,
	0x76, 0x31, 0x2f, 0x6c, 0x73, 0x61, 0x74, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x52,
	0x0a, 0x06, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72,
	0x70, 0x63, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x11, 0x12, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x73, 0x12, 0x65, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x1a, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x0e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x1e, 0x2e, 0x70,
	0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70,
	0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x12, 0x3c, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x2f,
	0x7b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x7b, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x7d, 0x42, 0x27, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x73, 0x2f,
	0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_trader_proto_rawDescOnce sync.Once
	file_trader_proto_rawDescData = file_trader_proto_rawDesc
)

func file_trader_proto_rawDescGZIP() []byte {
	file_trader_proto_rawDescOnce.Do(func() {
		file_trader_proto_rawDescData = protoimpl.X.CompressGZIP(file_trader_proto_rawDescData)
	})
	return file_trader_proto_rawDescData
}

var file_trader_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_trader_proto_msgTypes = make([]protoimpl.MessageInfo, 46)
var file_trader_proto_goTypes = []interface{}{
	(AccountState)(0),               // 0: poolrpc.AccountState
	(MatchState)(0),                 // 1: poolrpc.MatchState
	(MatchRejectReason)(0),          // 2: poolrpc.MatchRejectReason
	(*InitAccountRequest)(nil),      // 3: poolrpc.InitAccountRequest
	(*QuoteAccountRequest)(nil),     // 4: poolrpc.QuoteAccountRequest
	(*QuoteAccountResponse)(nil),    // 5: poolrpc.QuoteAccountResponse
	(*ListAccountsRequest)(nil),     // 6: poolrpc.ListAccountsRequest
	(*ListAccountsResponse)(nil),    // 7: poolrpc.ListAccountsResponse
	(*Output)(nil),                  // 8: poolrpc.Output
	(*OutputWithFee)(nil),           // 9: poolrpc.OutputWithFee
	(*OutputsWithImplicitFee)(nil),  // 10: poolrpc.OutputsWithImplicitFee
	(*CloseAccountRequest)(nil),     // 11: poolrpc.CloseAccountRequest
	(*CloseAccountResponse)(nil),    // 12: poolrpc.CloseAccountResponse
	(*WithdrawAccountRequest)(nil),  // 13: poolrpc.WithdrawAccountRequest
	(*WithdrawAccountResponse)(nil), // 14: poolrpc.WithdrawAccountResponse
	(*DepositAccountRequest)(nil),   // 15: poolrpc.DepositAccountRequest
	(*DepositAccountResponse)(nil),  // 16: poolrpc.DepositAccountResponse
	(*BumpAccountFeeRequest)(nil),   // 17: poolrpc.BumpAccountFeeRequest
	(*BumpAccountFeeResponse)(nil),  // 18: poolrpc.BumpAccountFeeResponse
	(*Account)(nil),                 // 19: poolrpc.Account
	(*SubmitOrderRequest)(nil),      // 20: poolrpc.SubmitOrderRequest
	(*SubmitOrderResponse)(nil),     // 21: poolrpc.SubmitOrderResponse
	(*ListOrdersRequest)(nil),       // 22: poolrpc.ListOrdersRequest
	(*ListOrdersResponse)(nil),      // 23: poolrpc.ListOrdersResponse
	(*CancelOrderRequest)(nil),      // 24: poolrpc.CancelOrderRequest
	(*CancelOrderResponse)(nil),     // 25: poolrpc.CancelOrderResponse
	(*Order)(nil),                   // 26: poolrpc.Order
	(*Bid)(nil),                     // 27: poolrpc.Bid
	(*Ask)(nil),                     // 28: poolrpc.Ask
	(*OrderEvent)(nil),              // 29: poolrpc.OrderEvent
	(*UpdatedEvent)(nil),            // 30: poolrpc.UpdatedEvent
	(*MatchEvent)(nil),              // 31: poolrpc.MatchEvent
	(*RecoverAccountsRequest)(nil),  // 32: poolrpc.RecoverAccountsRequest
	(*RecoverAccountsResponse)(nil), // 33: poolrpc.RecoverAccountsResponse
	(*AuctionFeeRequest)(nil),       // 34: poolrpc.AuctionFeeRequest
	(*AuctionFeeResponse)(nil),      // 35: poolrpc.AuctionFeeResponse
	(*Lease)(nil),                   // 36: poolrpc.Lease
	(*LeasesRequest)(nil),           // 37: poolrpc.LeasesRequest
	(*LeasesResponse)(nil),          // 38: poolrpc.LeasesResponse
	(*TokensRequest)(nil),           // 39: poolrpc.TokensRequest
	(*TokensResponse)(nil),          // 40: poolrpc.TokensResponse
	(*LsatToken)(nil),               // 41: poolrpc.LsatToken
	(*LeaseDurationRequest)(nil),    // 42: poolrpc.LeaseDurationRequest
	(*LeaseDurationResponse)(nil),   // 43: poolrpc.LeaseDurationResponse
	(*NextBatchInfoRequest)(nil),    // 44: poolrpc.NextBatchInfoRequest
	(*NextBatchInfoResponse)(nil),   // 45: poolrpc.NextBatchInfoResponse
	(*NodeRatingRequest)(nil),       // 46: poolrpc.NodeRatingRequest
	(*NodeRatingResponse)(nil),      // 47: poolrpc.NodeRatingResponse
	nil,                             // 48: poolrpc.LeaseDurationResponse.LeaseDurationsEntry
	(*OutPoint)(nil),                // 49: poolrpc.OutPoint
	(*InvalidOrder)(nil),            // 50: poolrpc.InvalidOrder
	(OrderState)(0),                 // 51: poolrpc.OrderState
	(NodeTier)(0),                   // 52: poolrpc.NodeTier
	(*ExecutionFee)(nil),            // 53: poolrpc.ExecutionFee
	(*NodeRating)(nil),              // 54: poolrpc.NodeRating
	(*BatchSnapshotRequest)(nil),    // 55: poolrpc.BatchSnapshotRequest
	(*BatchSnapshotsRequest)(nil),   // 56: poolrpc.BatchSnapshotsRequest
	(*BatchSnapshotResponse)(nil),   // 57: poolrpc.BatchSnapshotResponse
	(*BatchSnapshotsResponse)(nil),  // 58: poolrpc.BatchSnapshotsResponse
}
var file_trader_proto_depIdxs = []int32{
	19, // 0: poolrpc.ListAccountsResponse.accounts:type_name -> poolrpc.Account
	8,  // 1: poolrpc.OutputsWithImplicitFee.outputs:type_name -> poolrpc.Output
	9,  // 2: poolrpc.CloseAccountRequest.output_with_fee:type_name -> poolrpc.OutputWithFee
	10, // 3: poolrpc.CloseAccountRequest.outputs:type_name -> poolrpc.OutputsWithImplicitFee
	8,  // 4: poolrpc.WithdrawAccountRequest.outputs:type_name -> poolrpc.Output
	19, // 5: poolrpc.WithdrawAccountResponse.account:type_name -> poolrpc.Account
	19, // 6: poolrpc.DepositAccountResponse.account:type_name -> poolrpc.Account
	49, // 7: poolrpc.Account.outpoint:type_name -> poolrpc.OutPoint
	0,  // 8: poolrpc.Account.state:type_name -> poolrpc.AccountState
	28, // 9: poolrpc.SubmitOrderRequest.ask:type_name -> poolrpc.Ask
	27, // 10: poolrpc.SubmitOrderRequest.bid:type_name -> poolrpc.Bid
	50, // 11: poolrpc.SubmitOrderResponse.invalid_order:type_name -> poolrpc.InvalidOrder
	28, // 12: poolrpc.ListOrdersResponse.asks:type_name -> poolrpc.Ask
	27, // 13: poolrpc.ListOrdersResponse.bids:type_name -> poolrpc.Bid
	51, // 14: poolrpc.Order.state:type_name -> poolrpc.OrderState
	29, // 15: poolrpc.Order.events:type_name -> poolrpc.OrderEvent
	26, // 16: poolrpc.Bid.details:type_name -> poolrpc.Order
	52, // 17: poolrpc.Bid.min_node_tier:type_name -> poolrpc.NodeTier
	26, // 18: poolrpc.Ask.details:type_name -> poolrpc.Order
	30, // 19: poolrpc.OrderEvent.state_change:type_name -> poolrpc.UpdatedEvent
	31, // 20: poolrpc.OrderEvent.matched:type_name -> poolrpc.MatchEvent
	51, // 21: poolrpc.UpdatedEvent.previous_state:type_name -> poolrpc.OrderState
	51, // 22: poolrpc.UpdatedEvent.new_state:type_name -> poolrpc.OrderState
	1,  // 23: poolrpc.MatchEvent.match_state:type_name -> poolrpc.MatchState
	2,  // 24: poolrpc.MatchEvent.reject_reason:type_name -> poolrpc.MatchRejectReason
	53, // 25: poolrpc.AuctionFeeResponse.execution_fee:type_name -> poolrpc.ExecutionFee
	49, // 26: poolrpc.Lease.channel_point:type_name -> poolrpc.OutPoint
	52, // 27: poolrpc.Lease.channel_node_tier:type_name -> poolrpc.NodeTier
	36, // 28: poolrpc.LeasesResponse.leases:type_name -> poolrpc.Lease
	41, // 29: poolrpc.TokensResponse.tokens:type_name -> poolrpc.LsatToken
	48, // 30: poolrpc.LeaseDurationResponse.lease_durations:type_name -> poolrpc.LeaseDurationResponse.LeaseDurationsEntry
	54, // 31: poolrpc.NodeRatingResponse.node_ratings:type_name -> poolrpc.NodeRating
	4,  // 32: poolrpc.Trader.QuoteAccount:input_type -> poolrpc.QuoteAccountRequest
	3,  // 33: poolrpc.Trader.InitAccount:input_type -> poolrpc.InitAccountRequest
	6,  // 34: poolrpc.Trader.ListAccounts:input_type -> poolrpc.ListAccountsRequest
	11, // 35: poolrpc.Trader.CloseAccount:input_type -> poolrpc.CloseAccountRequest
	13, // 36: poolrpc.Trader.WithdrawAccount:input_type -> poolrpc.WithdrawAccountRequest
	15, // 37: poolrpc.Trader.DepositAccount:input_type -> poolrpc.DepositAccountRequest
	17, // 38: poolrpc.Trader.BumpAccountFee:input_type -> poolrpc.BumpAccountFeeRequest
	32, // 39: poolrpc.Trader.RecoverAccounts:input_type -> poolrpc.RecoverAccountsRequest
	20, // 40: poolrpc.Trader.SubmitOrder:input_type -> poolrpc.SubmitOrderRequest
	22, // 41: poolrpc.Trader.ListOrders:input_type -> poolrpc.ListOrdersRequest
	24, // 42: poolrpc.Trader.CancelOrder:input_type -> poolrpc.CancelOrderRequest
	34, // 43: poolrpc.Trader.AuctionFee:input_type -> poolrpc.AuctionFeeRequest
	42, // 44: poolrpc.Trader.LeaseDurations:input_type -> poolrpc.LeaseDurationRequest
	44, // 45: poolrpc.Trader.NextBatchInfo:input_type -> poolrpc.NextBatchInfoRequest
	55, // 46: poolrpc.Trader.BatchSnapshot:input_type -> poolrpc.BatchSnapshotRequest
	39, // 47: poolrpc.Trader.GetLsatTokens:input_type -> poolrpc.TokensRequest
	37, // 48: poolrpc.Trader.Leases:input_type -> poolrpc.LeasesRequest
	46, // 49: poolrpc.Trader.NodeRatings:input_type -> poolrpc.NodeRatingRequest
	56, // 50: poolrpc.Trader.BatchSnapshots:input_type -> poolrpc.BatchSnapshotsRequest
	5,  // 51: poolrpc.Trader.QuoteAccount:output_type -> poolrpc.QuoteAccountResponse
	19, // 52: poolrpc.Trader.InitAccount:output_type -> poolrpc.Account
	7,  // 53: poolrpc.Trader.ListAccounts:output_type -> poolrpc.ListAccountsResponse
	12, // 54: poolrpc.Trader.CloseAccount:output_type -> poolrpc.CloseAccountResponse
	14, // 55: poolrpc.Trader.WithdrawAccount:output_type -> poolrpc.WithdrawAccountResponse
	16, // 56: poolrpc.Trader.DepositAccount:output_type -> poolrpc.DepositAccountResponse
	18, // 57: poolrpc.Trader.BumpAccountFee:output_type -> poolrpc.BumpAccountFeeResponse
	33, // 58: poolrpc.Trader.RecoverAccounts:output_type -> poolrpc.RecoverAccountsResponse
	21, // 59: poolrpc.Trader.SubmitOrder:output_type -> poolrpc.SubmitOrderResponse
	23, // 60: poolrpc.Trader.ListOrders:output_type -> poolrpc.ListOrdersResponse
	25, // 61: poolrpc.Trader.CancelOrder:output_type -> poolrpc.CancelOrderResponse
	35, // 62: poolrpc.Trader.AuctionFee:output_type -> poolrpc.AuctionFeeResponse
	43, // 63: poolrpc.Trader.LeaseDurations:output_type -> poolrpc.LeaseDurationResponse
	45, // 64: poolrpc.Trader.NextBatchInfo:output_type -> poolrpc.NextBatchInfoResponse
	57, // 65: poolrpc.Trader.BatchSnapshot:output_type -> poolrpc.BatchSnapshotResponse
	40, // 66: poolrpc.Trader.GetLsatTokens:output_type -> poolrpc.TokensResponse
	38, // 67: poolrpc.Trader.Leases:output_type -> poolrpc.LeasesResponse
	47, // 68: poolrpc.Trader.NodeRatings:output_type -> poolrpc.NodeRatingResponse
	58, // 69: poolrpc.Trader.BatchSnapshots:output_type -> poolrpc.BatchSnapshotsResponse
	51, // [51:70] is the sub-list for method output_type
	32, // [32:51] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_trader_proto_init() }
func file_trader_proto_init() {
	if File_trader_proto != nil {
		return
	}
	file_auctioneer_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_trader_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuoteAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuoteAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAccountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAccountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Output); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputWithFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputsWithImplicitFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BumpAccountFeeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BumpAccountFeeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrdersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoverAccountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoverAccountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuctionFeeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuctionFeeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lease); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeasesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokensRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokensResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LsatToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaseDurationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaseDurationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextBatchInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextBatchInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeRatingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trader_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeRatingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_trader_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*InitAccountRequest_AbsoluteHeight)(nil),
		(*InitAccountRequest_RelativeHeight)(nil),
		(*InitAccountRequest_ConfTarget)(nil),
	}
	file_trader_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*QuoteAccountRequest_ConfTarget)(nil),
	}
	file_trader_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*OutputWithFee_ConfTarget)(nil),
		(*OutputWithFee_FeeRateSatPerKw)(nil),
	}
	file_trader_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*CloseAccountRequest_OutputWithFee)(nil),
		(*CloseAccountRequest_Outputs)(nil),
	}
	file_trader_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*SubmitOrderRequest_Ask)(nil),
		(*SubmitOrderRequest_Bid)(nil),
	}
	file_trader_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*SubmitOrderResponse_InvalidOrder)(nil),
		(*SubmitOrderResponse_AcceptedOrderNonce)(nil),
	}
	file_trader_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*OrderEvent_StateChange)(nil),
		(*OrderEvent_Matched)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_trader_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   46,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_trader_proto_goTypes,
		DependencyIndexes: file_trader_proto_depIdxs,
		EnumInfos:         file_trader_proto_enumTypes,
		MessageInfos:      file_trader_proto_msgTypes,
	}.Build()
	File_trader_proto = out.File
	file_trader_proto_rawDesc = nil
	file_trader_proto_goTypes = nil
	file_trader_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TraderClient is the client API for Trader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TraderClient interface {
	//
	//QuoteAccount gets a fee quote to fund an account of the given size with the
	//given confirmation target. If the connected lnd wallet doesn't have enough
	//balance to fund an account of the requested size, an error is returned.
	QuoteAccount(ctx context.Context, in *QuoteAccountRequest, opts ...grpc.CallOption) (*QuoteAccountResponse, error)
	// pool: `accounts new`
	//InitAccount creates a new account with the requested size and expiration,
	//funding it from the wallet of the connected lnd node.
	InitAccount(ctx context.Context, in *InitAccountRequest, opts ...grpc.CallOption) (*Account, error)
	// pool: `accounts list`
	//ListAccounts returns a list of all accounts known to the trader daemon and
	//their current state.
	ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error)
	// pool: `accounts close`
	//CloseAccount closes an account and returns the funds locked in that account
	//to the connected lnd node's wallet.
	CloseAccount(ctx context.Context, in *CloseAccountRequest, opts ...grpc.CallOption) (*CloseAccountResponse, error)
	// pool: `accounts withdraw`
	//WithdrawAccount splits off parts of the account balance into the specified
	//outputs while recreating the account with a reduced balance.
	WithdrawAccount(ctx context.Context, in *WithdrawAccountRequest, opts ...grpc.CallOption) (*WithdrawAccountResponse, error)
	// pool: `accounts deposit`
	//DepositAccount adds more funds from the connected lnd node's wallet to an
	//account.
	DepositAccount(ctx context.Context, in *DepositAccountRequest, opts ...grpc.CallOption) (*DepositAccountResponse, error)
	// pool: `accounts bumpfee`
	//BumpAccountFee attempts to bump the fee of an account's transaction through
	//child-pays-for-parent (CPFP). Since the CPFP is performed through the
	//backing lnd node, the account transaction must contain an output under its
	//control for a successful bump. If a CPFP has already been performed for an
	//account, and this RPC is invoked again, then a replacing transaction (RBF)
	//of the child will be broadcast.
	BumpAccountFee(ctx context.Context, in *BumpAccountFeeRequest, opts ...grpc.CallOption) (*BumpAccountFeeResponse, error)
	// pool: `accounts recover`
	//RecoverAccounts queries the auction server for this trader daemon's accounts
	//in case we lost our local account database.
	RecoverAccounts(ctx context.Context, in *RecoverAccountsRequest, opts ...grpc.CallOption) (*RecoverAccountsResponse, error)
	// pool: `orders submit`
	//SubmitOrder creates a new ask or bid order and submits for the given account
	//and submits it to the auction server for matching.
	SubmitOrder(ctx context.Context, in *SubmitOrderRequest, opts ...grpc.CallOption) (*SubmitOrderResponse, error)
	// pool: `orders list`
	//ListOrders returns a list of all active and archived orders that are
	//currently known to the trader daemon.
	ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error)
	// pool: `orders cancel`
	//CancelOrder cancels an active order with the auction server to remove it
	//from future matching.
	CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error)
	// pool: `auction fee`
	//AuctionFee returns the current auction order execution fee specified by the
	//auction server.
	AuctionFee(ctx context.Context, in *AuctionFeeRequest, opts ...grpc.CallOption) (*AuctionFeeResponse, error)
	// pool: `auction leasedurations`
	//LeaseDurations returns the current set of valid lease duration in the
	//market as is, and also information w.r.t if the market is currently active.
	LeaseDurations(ctx context.Context, in *LeaseDurationRequest, opts ...grpc.CallOption) (*LeaseDurationResponse, error)
	// pool: `auction nextbatchinfo`
	//NextBatchInfo returns information about the next batch the auctioneer will
	//perform.
	NextBatchInfo(ctx context.Context, in *NextBatchInfoRequest, opts ...grpc.CallOption) (*NextBatchInfoResponse, error)
	// pool: `auction snapshot`
	//BatchSnapshot returns the snapshot of a past batch identified by its ID.
	//If no ID is provided, the snapshot of the last finalized batch is returned.
	//Deprecated, use BatchSnapshots instead.
	BatchSnapshot(ctx context.Context, in *BatchSnapshotRequest, opts ...grpc.CallOption) (*BatchSnapshotResponse, error)
	// pool: `listauth`
	//GetLsatTokens returns all LSAT tokens the daemon ever paid for.
	GetLsatTokens(ctx context.Context, in *TokensRequest, opts ...grpc.CallOption) (*TokensResponse, error)
	// pool: `auction leases`
	//Leases returns the list of channels that were either purchased or sold by
	//the trader within the auction.
	Leases(ctx context.Context, in *LeasesRequest, opts ...grpc.CallOption) (*LeasesResponse, error)
	// pool: `auction ratings`
	//Returns the Node Tier information for this target Lightning node, and other
	//related ranking information.
	NodeRatings(ctx context.Context, in *NodeRatingRequest, opts ...grpc.CallOption) (*NodeRatingResponse, error)
	// pool: `auction snapshot`
	//BatchSnapshots returns a list of batch snapshots starting at the start batch
	//ID and going back through the history of batches, returning at most the
	//number of specified batches. A maximum of 100 snapshots can be queried in
	//one call. If no start batch ID is provided, the most recent finalized batch
	//is used as the starting point to go back from.
	BatchSnapshots(ctx context.Context, in *BatchSnapshotsRequest, opts ...grpc.CallOption) (*BatchSnapshotsResponse, error)
}

type traderClient struct {
	cc grpc.ClientConnInterface
}

func NewTraderClient(cc grpc.ClientConnInterface) TraderClient {
	return &traderClient{cc}
}

func (c *traderClient) QuoteAccount(ctx context.Context, in *QuoteAccountRequest, opts ...grpc.CallOption) (*QuoteAccountResponse, error) {
	out := new(QuoteAccountResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/QuoteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) InitAccount(ctx context.Context, in *InitAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/InitAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error) {
	out := new(ListAccountsResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/ListAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) CloseAccount(ctx context.Context, in *CloseAccountRequest, opts ...grpc.CallOption) (*CloseAccountResponse, error) {
	out := new(CloseAccountResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/CloseAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) WithdrawAccount(ctx context.Context, in *WithdrawAccountRequest, opts ...grpc.CallOption) (*WithdrawAccountResponse, error) {
	out := new(WithdrawAccountResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/WithdrawAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) DepositAccount(ctx context.Context, in *DepositAccountRequest, opts ...grpc.CallOption) (*DepositAccountResponse, error) {
	out := new(DepositAccountResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/DepositAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) BumpAccountFee(ctx context.Context, in *BumpAccountFeeRequest, opts ...grpc.CallOption) (*BumpAccountFeeResponse, error) {
	out := new(BumpAccountFeeResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/BumpAccountFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) RecoverAccounts(ctx context.Context, in *RecoverAccountsRequest, opts ...grpc.CallOption) (*RecoverAccountsResponse, error) {
	out := new(RecoverAccountsResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/RecoverAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) SubmitOrder(ctx context.Context, in *SubmitOrderRequest, opts ...grpc.CallOption) (*SubmitOrderResponse, error) {
	out := new(SubmitOrderResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/SubmitOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error) {
	out := new(ListOrdersResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/ListOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error) {
	out := new(CancelOrderResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/CancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) AuctionFee(ctx context.Context, in *AuctionFeeRequest, opts ...grpc.CallOption) (*AuctionFeeResponse, error) {
	out := new(AuctionFeeResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/AuctionFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) LeaseDurations(ctx context.Context, in *LeaseDurationRequest, opts ...grpc.CallOption) (*LeaseDurationResponse, error) {
	out := new(LeaseDurationResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/LeaseDurations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) NextBatchInfo(ctx context.Context, in *NextBatchInfoRequest, opts ...grpc.CallOption) (*NextBatchInfoResponse, error) {
	out := new(NextBatchInfoResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/NextBatchInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) BatchSnapshot(ctx context.Context, in *BatchSnapshotRequest, opts ...grpc.CallOption) (*BatchSnapshotResponse, error) {
	out := new(BatchSnapshotResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/BatchSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) GetLsatTokens(ctx context.Context, in *TokensRequest, opts ...grpc.CallOption) (*TokensResponse, error) {
	out := new(TokensResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/GetLsatTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) Leases(ctx context.Context, in *LeasesRequest, opts ...grpc.CallOption) (*LeasesResponse, error) {
	out := new(LeasesResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/Leases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) NodeRatings(ctx context.Context, in *NodeRatingRequest, opts ...grpc.CallOption) (*NodeRatingResponse, error) {
	out := new(NodeRatingResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/NodeRatings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) BatchSnapshots(ctx context.Context, in *BatchSnapshotsRequest, opts ...grpc.CallOption) (*BatchSnapshotsResponse, error) {
	out := new(BatchSnapshotsResponse)
	err := c.cc.Invoke(ctx, "/poolrpc.Trader/BatchSnapshots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TraderServer is the server API for Trader service.
type TraderServer interface {
	//
	//QuoteAccount gets a fee quote to fund an account of the given size with the
	//given confirmation target. If the connected lnd wallet doesn't have enough
	//balance to fund an account of the requested size, an error is returned.
	QuoteAccount(context.Context, *QuoteAccountRequest) (*QuoteAccountResponse, error)
	// pool: `accounts new`
	//InitAccount creates a new account with the requested size and expiration,
	//funding it from the wallet of the connected lnd node.
	InitAccount(context.Context, *InitAccountRequest) (*Account, error)
	// pool: `accounts list`
	//ListAccounts returns a list of all accounts known to the trader daemon and
	//their current state.
	ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error)
	// pool: `accounts close`
	//CloseAccount closes an account and returns the funds locked in that account
	//to the connected lnd node's wallet.
	CloseAccount(context.Context, *CloseAccountRequest) (*CloseAccountResponse, error)
	// pool: `accounts withdraw`
	//WithdrawAccount splits off parts of the account balance into the specified
	//outputs while recreating the account with a reduced balance.
	WithdrawAccount(context.Context, *WithdrawAccountRequest) (*WithdrawAccountResponse, error)
	// pool: `accounts deposit`
	//DepositAccount adds more funds from the connected lnd node's wallet to an
	//account.
	DepositAccount(context.Context, *DepositAccountRequest) (*DepositAccountResponse, error)
	// pool: `accounts bumpfee`
	//BumpAccountFee attempts to bump the fee of an account's transaction through
	//child-pays-for-parent (CPFP). Since the CPFP is performed through the
	//backing lnd node, the account transaction must contain an output under its
	//control for a successful bump. If a CPFP has already been performed for an
	//account, and this RPC is invoked again, then a replacing transaction (RBF)
	//of the child will be broadcast.
	BumpAccountFee(context.Context, *BumpAccountFeeRequest) (*BumpAccountFeeResponse, error)
	// pool: `accounts recover`
	//RecoverAccounts queries the auction server for this trader daemon's accounts
	//in case we lost our local account database.
	RecoverAccounts(context.Context, *RecoverAccountsRequest) (*RecoverAccountsResponse, error)
	// pool: `orders submit`
	//SubmitOrder creates a new ask or bid order and submits for the given account
	//and submits it to the auction server for matching.
	SubmitOrder(context.Context, *SubmitOrderRequest) (*SubmitOrderResponse, error)
	// pool: `orders list`
	//ListOrders returns a list of all active and archived orders that are
	//currently known to the trader daemon.
	ListOrders(context.Context, *ListOrdersRequest) (*ListOrdersResponse, error)
	// pool: `orders cancel`
	//CancelOrder cancels an active order with the auction server to remove it
	//from future matching.
	CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error)
	// pool: `auction fee`
	//AuctionFee returns the current auction order execution fee specified by the
	//auction server.
	AuctionFee(context.Context, *AuctionFeeRequest) (*AuctionFeeResponse, error)
	// pool: `auction leasedurations`
	//LeaseDurations returns the current set of valid lease duration in the
	//market as is, and also information w.r.t if the market is currently active.
	LeaseDurations(context.Context, *LeaseDurationRequest) (*LeaseDurationResponse, error)
	// pool: `auction nextbatchinfo`
	//NextBatchInfo returns information about the next batch the auctioneer will
	//perform.
	NextBatchInfo(context.Context, *NextBatchInfoRequest) (*NextBatchInfoResponse, error)
	// pool: `auction snapshot`
	//BatchSnapshot returns the snapshot of a past batch identified by its ID.
	//If no ID is provided, the snapshot of the last finalized batch is returned.
	//Deprecated, use BatchSnapshots instead.
	BatchSnapshot(context.Context, *BatchSnapshotRequest) (*BatchSnapshotResponse, error)
	// pool: `listauth`
	//GetLsatTokens returns all LSAT tokens the daemon ever paid for.
	GetLsatTokens(context.Context, *TokensRequest) (*TokensResponse, error)
	// pool: `auction leases`
	//Leases returns the list of channels that were either purchased or sold by
	//the trader within the auction.
	Leases(context.Context, *LeasesRequest) (*LeasesResponse, error)
	// pool: `auction ratings`
	//Returns the Node Tier information for this target Lightning node, and other
	//related ranking information.
	NodeRatings(context.Context, *NodeRatingRequest) (*NodeRatingResponse, error)
	// pool: `auction snapshot`
	//BatchSnapshots returns a list of batch snapshots starting at the start batch
	//ID and going back through the history of batches, returning at most the
	//number of specified batches. A maximum of 100 snapshots can be queried in
	//one call. If no start batch ID is provided, the most recent finalized batch
	//is used as the starting point to go back from.
	BatchSnapshots(context.Context, *BatchSnapshotsRequest) (*BatchSnapshotsResponse, error)
}

// UnimplementedTraderServer can be embedded to have forward compatible implementations.
type UnimplementedTraderServer struct {
}

func (*UnimplementedTraderServer) QuoteAccount(context.Context, *QuoteAccountRequest) (*QuoteAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuoteAccount not implemented")
}
func (*UnimplementedTraderServer) InitAccount(context.Context, *InitAccountRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitAccount not implemented")
}
func (*UnimplementedTraderServer) ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccounts not implemented")
}
func (*UnimplementedTraderServer) CloseAccount(context.Context, *CloseAccountRequest) (*CloseAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseAccount not implemented")
}
func (*UnimplementedTraderServer) WithdrawAccount(context.Context, *WithdrawAccountRequest) (*WithdrawAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawAccount not implemented")
}
func (*UnimplementedTraderServer) DepositAccount(context.Context, *DepositAccountRequest) (*DepositAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositAccount not implemented")
}
func (*UnimplementedTraderServer) BumpAccountFee(context.Context, *BumpAccountFeeRequest) (*BumpAccountFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BumpAccountFee not implemented")
}
func (*UnimplementedTraderServer) RecoverAccounts(context.Context, *RecoverAccountsRequest) (*RecoverAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverAccounts not implemented")
}
func (*UnimplementedTraderServer) SubmitOrder(context.Context, *SubmitOrderRequest) (*SubmitOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitOrder not implemented")
}
func (*UnimplementedTraderServer) ListOrders(context.Context, *ListOrdersRequest) (*ListOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrders not implemented")
}
func (*UnimplementedTraderServer) CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (*UnimplementedTraderServer) AuctionFee(context.Context, *AuctionFeeRequest) (*AuctionFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuctionFee not implemented")
}
func (*UnimplementedTraderServer) LeaseDurations(context.Context, *LeaseDurationRequest) (*LeaseDurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaseDurations not implemented")
}
func (*UnimplementedTraderServer) NextBatchInfo(context.Context, *NextBatchInfoRequest) (*NextBatchInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextBatchInfo not implemented")
}
func (*UnimplementedTraderServer) BatchSnapshot(context.Context, *BatchSnapshotRequest) (*BatchSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchSnapshot not implemented")
}
func (*UnimplementedTraderServer) GetLsatTokens(context.Context, *TokensRequest) (*TokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLsatTokens not implemented")
}
func (*UnimplementedTraderServer) Leases(context.Context, *LeasesRequest) (*LeasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leases not implemented")
}
func (*UnimplementedTraderServer) NodeRatings(context.Context, *NodeRatingRequest) (*NodeRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeRatings not implemented")
}
func (*UnimplementedTraderServer) BatchSnapshots(context.Context, *BatchSnapshotsRequest) (*BatchSnapshotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchSnapshots not implemented")
}

func RegisterTraderServer(s *grpc.Server, srv TraderServer) {
	s.RegisterService(&_Trader_serviceDesc, srv)
}

func _Trader_QuoteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuoteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).QuoteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/QuoteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).QuoteAccount(ctx, req.(*QuoteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_InitAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).InitAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/InitAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).InitAccount(ctx, req.(*InitAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/ListAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).ListAccounts(ctx, req.(*ListAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_CloseAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).CloseAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/CloseAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).CloseAccount(ctx, req.(*CloseAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_WithdrawAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).WithdrawAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/WithdrawAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).WithdrawAccount(ctx, req.(*WithdrawAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_DepositAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).DepositAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/DepositAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).DepositAccount(ctx, req.(*DepositAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_BumpAccountFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BumpAccountFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).BumpAccountFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/BumpAccountFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).BumpAccountFee(ctx, req.(*BumpAccountFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_RecoverAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).RecoverAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/RecoverAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).RecoverAccounts(ctx, req.(*RecoverAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_SubmitOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).SubmitOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/SubmitOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).SubmitOrder(ctx, req.(*SubmitOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_ListOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).ListOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/ListOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).ListOrders(ctx, req.(*ListOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).CancelOrder(ctx, req.(*CancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_AuctionFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuctionFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).AuctionFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/AuctionFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).AuctionFee(ctx, req.(*AuctionFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_LeaseDurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaseDurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).LeaseDurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/LeaseDurations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).LeaseDurations(ctx, req.(*LeaseDurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_NextBatchInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextBatchInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).NextBatchInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/NextBatchInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).NextBatchInfo(ctx, req.(*NextBatchInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_BatchSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).BatchSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/BatchSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).BatchSnapshot(ctx, req.(*BatchSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_GetLsatTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).GetLsatTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/GetLsatTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).GetLsatTokens(ctx, req.(*TokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_Leases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).Leases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/Leases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).Leases(ctx, req.(*LeasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_NodeRatings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).NodeRatings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/NodeRatings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).NodeRatings(ctx, req.(*NodeRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_BatchSnapshots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchSnapshotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).BatchSnapshots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poolrpc.Trader/BatchSnapshots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).BatchSnapshots(ctx, req.(*BatchSnapshotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Trader_serviceDesc = grpc.ServiceDesc{
	ServiceName: "poolrpc.Trader",
	HandlerType: (*TraderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QuoteAccount",
			Handler:    _Trader_QuoteAccount_Handler,
		},
		{
			MethodName: "InitAccount",
			Handler:    _Trader_InitAccount_Handler,
		},
		{
			MethodName: "ListAccounts",
			Handler:    _Trader_ListAccounts_Handler,
		},
		{
			MethodName: "CloseAccount",
			Handler:    _Trader_CloseAccount_Handler,
		},
		{
			MethodName: "WithdrawAccount",
			Handler:    _Trader_WithdrawAccount_Handler,
		},
		{
			MethodName: "DepositAccount",
			Handler:    _Trader_DepositAccount_Handler,
		},
		{
			MethodName: "BumpAccountFee",
			Handler:    _Trader_BumpAccountFee_Handler,
		},
		{
			MethodName: "RecoverAccounts",
			Handler:    _Trader_RecoverAccounts_Handler,
		},
		{
			MethodName: "SubmitOrder",
			Handler:    _Trader_SubmitOrder_Handler,
		},
		{
			MethodName: "ListOrders",
			Handler:    _Trader_ListOrders_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _Trader_CancelOrder_Handler,
		},
		{
			MethodName: "AuctionFee",
			Handler:    _Trader_AuctionFee_Handler,
		},
		{
			MethodName: "LeaseDurations",
			Handler:    _Trader_LeaseDurations_Handler,
		},
		{
			MethodName: "NextBatchInfo",
			Handler:    _Trader_NextBatchInfo_Handler,
		},
		{
			MethodName: "BatchSnapshot",
			Handler:    _Trader_BatchSnapshot_Handler,
		},
		{
			MethodName: "GetLsatTokens",
			Handler:    _Trader_GetLsatTokens_Handler,
		},
		{
			MethodName: "Leases",
			Handler:    _Trader_Leases_Handler,
		},
		{
			MethodName: "NodeRatings",
			Handler:    _Trader_NodeRatings_Handler,
		},
		{
			MethodName: "BatchSnapshots",
			Handler:    _Trader_BatchSnapshots_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trader.proto",
}
